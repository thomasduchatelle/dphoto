// Code generated by mockery v2.3.0. DO NOT EDIT.

package config

import (
	session "github.com/aws/aws-sdk-go/aws/session"
	mock "github.com/stretchr/testify/mock"
)

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *MockConfig) Get(key string) interface{} {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetAWSSession provides a mock function with given fields:
func (_m *MockConfig) GetAWSSession() *session.Session {
	ret := _m.Called()

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func() *session.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	return r0
}

// GetBool provides a mock function with given fields: key
func (_m *MockConfig) GetBool(key string) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetInt provides a mock function with given fields: key
func (_m *MockConfig) GetInt(key string) int {
	ret := _m.Called(key)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetIntOrDefault provides a mock function with given fields: key, defaultValue
func (_m *MockConfig) GetIntOrDefault(key string, defaultValue int) int {
	ret := _m.Called(key, defaultValue)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetString provides a mock function with given fields: key
func (_m *MockConfig) GetString(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
