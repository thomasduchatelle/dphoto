// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	io "io"

	backupmodel "duchatelle.io/dphoto/dphoto/backup/backupmodel"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// FoundMedia is an autogenerated mock type for the FoundMedia type
type FoundMedia struct {
	mock.Mock
}

// Filename provides a mock function with given fields:
func (_m *FoundMedia) Filename() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LastModificationDate provides a mock function with given fields:
func (_m *FoundMedia) LastModificationDate() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ReadMedia provides a mock function with given fields:
func (_m *FoundMedia) ReadMedia() (io.Reader, error) {
	ret := _m.Called()

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func() io.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleSignature provides a mock function with given fields:
func (_m *FoundMedia) SimpleSignature() *backupmodel.SimpleMediaSignature {
	ret := _m.Called()

	var r0 *backupmodel.SimpleMediaSignature
	if rf, ok := ret.Get(0).(func() *backupmodel.SimpleMediaSignature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupmodel.SimpleMediaSignature)
		}
	}

	return r0
}
