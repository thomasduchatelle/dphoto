// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	catalog "duchatelle.io/dphoto/dphoto/catalog"
	mock "github.com/stretchr/testify/mock"
)

// CatalogProxyAdapter is an autogenerated mock type for the CatalogProxyAdapter type
type CatalogProxyAdapter struct {
	mock.Mock
}

// Create provides a mock function with given fields: createRequest
func (_m *CatalogProxyAdapter) Create(createRequest catalog.CreateAlbum) error {
	ret := _m.Called(createRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(catalog.CreateAlbum) error); ok {
		r0 = rf(createRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllAlbums provides a mock function with given fields:
func (_m *CatalogProxyAdapter) FindAllAlbums() ([]*catalog.Album, error) {
	ret := _m.Called()

	var r0 []*catalog.Album
	if rf, ok := ret.Get(0).(func() []*catalog.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSignatures provides a mock function with given fields: signatures
func (_m *CatalogProxyAdapter) FindSignatures(signatures []*catalog.MediaSignature) ([]*catalog.MediaSignature, error) {
	ret := _m.Called(signatures)

	var r0 []*catalog.MediaSignature
	if rf, ok := ret.Get(0).(func([]*catalog.MediaSignature) []*catalog.MediaSignature); ok {
		r0 = rf(signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.MediaSignature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*catalog.MediaSignature) error); ok {
		r1 = rf(signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMedias provides a mock function with given fields: medias
func (_m *CatalogProxyAdapter) InsertMedias(medias []catalog.CreateMediaRequest) error {
	ret := _m.Called(medias)

	var r0 error
	if rf, ok := ret.Get(0).(func([]catalog.CreateMediaRequest) error); ok {
		r0 = rf(medias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
