// Code generated by mockery v2.3.0. DO NOT EDIT.

package backup

import mock "github.com/stretchr/testify/mock"

// MockVolumeRepositoryAdapter is an autogenerated mock type for the VolumeRepositoryAdapter type
type MockVolumeRepositoryAdapter struct {
	mock.Mock
}

// CreateNewVolume provides a mock function with given fields: volume
func (_m *MockVolumeRepositoryAdapter) CreateNewVolume(volume RemovableVolume) error {
	ret := _m.Called(volume)

	var r0 error
	if rf, ok := ret.Get(0).(func(RemovableVolume) error); ok {
		r0 = rf(volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindVolumeMetadata provides a mock function with given fields: _a0
func (_m *MockVolumeRepositoryAdapter) FindVolumeMetadata(_a0 string) (*VolumeMetadata, error) {
	ret := _m.Called(_a0)

	var r0 *VolumeMetadata
	if rf, ok := ret.Get(0).(func(string) *VolumeMetadata); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VolumeMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreLastSnapshot provides a mock function with given fields: volumeId
func (_m *MockVolumeRepositoryAdapter) RestoreLastSnapshot(volumeId string) ([]SimpleMediaSignature, error) {
	ret := _m.Called(volumeId)

	var r0 []SimpleMediaSignature
	if rf, ok := ret.Get(0).(func(string) []SimpleMediaSignature); ok {
		r0 = rf(volumeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SimpleMediaSignature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(volumeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreSnapshot provides a mock function with given fields: volumeId, backupId, signatures
func (_m *MockVolumeRepositoryAdapter) StoreSnapshot(volumeId string, backupId string, signatures []SimpleMediaSignature) error {
	ret := _m.Called(volumeId, backupId, signatures)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []SimpleMediaSignature) error); ok {
		r0 = rf(volumeId, backupId, signatures)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
