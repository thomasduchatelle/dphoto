// Code generated by mockery v2.3.0. DO NOT EDIT.

package album

import mock "github.com/stretchr/testify/mock"

// MockRepositoryPort is an autogenerated mock type for the RepositoryPort type
type MockRepositoryPort struct {
	mock.Mock
}

// DeleteEmpty provides a mock function with given fields: folderName
func (_m *MockRepositoryPort) DeleteEmpty(folderName string) error {
	ret := _m.Called(folderName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(folderName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: folderName
func (_m *MockRepositoryPort) Find(folderName string) (*Album, error) {
	ret := _m.Called(folderName)

	var r0 *Album
	if rf, ok := ret.Get(0).(func(string) *Album); ok {
		r0 = rf(folderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(folderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *MockRepositoryPort) FindAll() ([]Album, error) {
	ret := _m.Called()

	var r0 []Album
	if rf, ok := ret.Get(0).(func() []Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: album
func (_m *MockRepositoryPort) Insert(album Album) error {
	ret := _m.Called(album)

	var r0 error
	if rf, ok := ret.Get(0).(func(Album) error); ok {
		r0 = rf(album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: album
func (_m *MockRepositoryPort) Update(album Album) error {
	ret := _m.Called(album)

	var r0 error
	if rf, ok := ret.Get(0).(func(Album) error); ok {
		r0 = rf(album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMedias provides a mock function with given fields: filter, update
func (_m *MockRepositoryPort) UpdateMedias(filter *MediaFilter, update MediaUpdate) error {
	ret := _m.Called(filter, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(*MediaFilter, MediaUpdate) error); ok {
		r0 = rf(filter, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
