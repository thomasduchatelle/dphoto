// Code generated by mockery v2.3.0. DO NOT EDIT.

package catalog

import mock "github.com/stretchr/testify/mock"

// MockRepositoryPort is an autogenerated mock type for the RepositoryPort type
type MockRepositoryPort struct {
	mock.Mock
}

// DeleteEmptyAlbum provides a mock function with given fields: folderName
func (_m *MockRepositoryPort) DeleteEmptyAlbum(folderName string) error {
	ret := _m.Called(folderName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(folderName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAlbum provides a mock function with given fields: folderName
func (_m *MockRepositoryPort) FindAlbum(folderName string) (*Album, error) {
	ret := _m.Called(folderName)

	var r0 *Album
	if rf, ok := ret.Get(0).(func(string) *Album); ok {
		r0 = rf(folderName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(folderName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllAlbums provides a mock function with given fields:
func (_m *MockRepositoryPort) FindAllAlbums() ([]*Album, error) {
	ret := _m.Called()

	var r0 []*Album
	if rf, ok := ret.Get(0).(func() []*Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExistingSignatures provides a mock function with given fields: signatures
func (_m *MockRepositoryPort) FindExistingSignatures(signatures []*MediaSignature) ([]*MediaSignature, error) {
	ret := _m.Called(signatures)

	var r0 []*MediaSignature
	if rf, ok := ret.Get(0).(func([]*MediaSignature) []*MediaSignature); ok {
		r0 = rf(signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*MediaSignature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*MediaSignature) error); ok {
		r1 = rf(signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFilesToMove provides a mock function with given fields: transactionId, pageToken
func (_m *MockRepositoryPort) FindFilesToMove(transactionId string, pageToken string) ([]*MovedMedia, string, error) {
	ret := _m.Called(transactionId, pageToken)

	var r0 []*MovedMedia
	if rf, ok := ret.Get(0).(func(string, string) []*MovedMedia); ok {
		r0 = rf(transactionId, pageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*MovedMedia)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(transactionId, pageToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(transactionId, pageToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindMedias provides a mock function with given fields: folderName, request
func (_m *MockRepositoryPort) FindMedias(folderName string, request PageRequest) (*MediaPage, error) {
	ret := _m.Called(folderName, request)

	var r0 *MediaPage
	if rf, ok := ret.Get(0).(func(string, PageRequest) *MediaPage); ok {
		r0 = rf(folderName, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MediaPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, PageRequest) error); ok {
		r1 = rf(folderName, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReadyMoveTransactions provides a mock function with given fields:
func (_m *MockRepositoryPort) FindReadyMoveTransactions() ([]*MoveTransaction, error) {
	ret := _m.Called()

	var r0 []*MoveTransaction
	if rf, ok := ret.Get(0).(func() []*MoveTransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*MoveTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAlbum provides a mock function with given fields: album
func (_m *MockRepositoryPort) InsertAlbum(album Album) error {
	ret := _m.Called(album)

	var r0 error
	if rf, ok := ret.Get(0).(func(Album) error); ok {
		r0 = rf(album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMedias provides a mock function with given fields: media
func (_m *MockRepositoryPort) InsertMedias(media []CreateMediaRequest) error {
	ret := _m.Called(media)

	var r0 error
	if rf, ok := ret.Get(0).(func([]CreateMediaRequest) error); ok {
		r0 = rf(media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAlbum provides a mock function with given fields: album
func (_m *MockRepositoryPort) UpdateAlbum(album Album) error {
	ret := _m.Called(album)

	var r0 error
	if rf, ok := ret.Get(0).(func(Album) error); ok {
		r0 = rf(album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMedias provides a mock function with given fields: filter, newFolderName
func (_m *MockRepositoryPort) UpdateMedias(filter *UpdateMediaFilter, newFolderName string) (string, int, error) {
	ret := _m.Called(filter, newFolderName)

	var r0 string
	if rf, ok := ret.Get(0).(func(*UpdateMediaFilter, string) string); ok {
		r0 = rf(filter, newFolderName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*UpdateMediaFilter, string) int); ok {
		r1 = rf(filter, newFolderName)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*UpdateMediaFilter, string) error); ok {
		r2 = rf(filter, newFolderName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMediasLocation provides a mock function with given fields: transactionId, moves
func (_m *MockRepositoryPort) UpdateMediasLocation(transactionId string, moves []*MovedMedia) error {
	ret := _m.Called(transactionId, moves)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*MovedMedia) error); ok {
		r0 = rf(transactionId, moves)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
