name: Feature CI/CD
on:
  push:
    branches-ignore:
      - next
      - main
      - actions
      - update-snapshots

jobs:
  semver:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.semver.outputs.MajorMinorPatch }}
      snapshot: ${{ steps.snapshot.outputs.snapshot }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: semver
        uses: gittools/actions/gitversion/execute@v1.1.1
        with:
          useConfigFile: true
      - name: Is snapshot ?
        id: snapshot
        run: |
          if [[ "${{ github.ref }}" == "main" ]] ; then
            echo "snapshot=false" >> $GITHUB_OUTPUT
          else
            echo "snapshot=true" >> $GITHUB_OUTPUT
          fi
            

  test-terraform:
    runs-on: ubuntu-latest
    environment:
      name: dev
    env:
      TF_WORKSPACE: dev
    outputs:
      no_change: ${{ steps.plan.outputs.no_change }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup terraform
        uses: ./.github/actions/install-terraform
        with:
          tf-api-token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        run: |
          cd deployments/infra-data
          terraform init

      - name: Terraform Validate
        id: validate
        continue-on-error: true
        run: |
          cd deployments/infra-data
          terraform validate -no-color

      - name: Terraform Format
        id: fmt
        continue-on-error: true
        run: |
          cd deployments/infra-data
          terraform fmt -check

      - name: Terraform Plan (dev)
        id: plan
        continue-on-error: true
        run: |
          cd deployments/infra-data
          RC=0
          terraform plan -no-color || RC=$?

          if [[ $RC -eq 0 ]] ; then
           echo "no_change=true" >> $GITHUB_OUTPUT
          else
            if [[ $RC -eq 2 ]] ; then 
              echo "no_change=false" >> $GITHUB_OUTPUT
            else
              return $RC
            fi
          fi

      - name: Save plan in file
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        run: |
          echo "$PLAN" > terraform-plan-dev.log

      - name: Upload Plan (dev)
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-dev.log
          path: terraform-plan-dev.log

      - name: Publish Plan (dev)
        uses: actions/github-script@v7
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: 'thomasduchatelle:${{ github.ref_name }}'
            });
            
            if (prs.status !== 200 || prs.data.length == 0) {
              console.log("No open PR for this branch [${{ github.ref }}]");
              return
            }
            
            let summary = "";
            if ('${{ steps.plan.outputs.no_change }}' === 'true' ) {
              summary = " - no change"
            }
            
            const output = `
            * ${{ steps.fmt.outcome == 'success' && ':white_check_mark:' || ':x:' }} Formatting \`${{ steps.fmt.outcome }}\`
            * ${{ steps.init.outcome == 'success' && ':white_check_mark:' || ':x:' }} Initialisation  \`${{ steps.init.outcome }}\`
            * ${{ steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:' }} Validation \`${{ steps.validate.outcome }}\`
            * ${{ steps.plan.outcome == 'success' && ':white_check_mark:' || ':x:' }} Plan \`${{ steps.plan.outcome }}\`
            
            ### Dev Plan
            
            <details><summary>Show Plan${summary}</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: prs.data[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: contains(steps.*.outcome, 'failure')
        run: exit 1

  test-go:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup GO
        uses: ./.github/actions/install-go
      - name: start mock services
        run: docker-compose up -d
      - run: make test-go

  build-go-api:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    if: ${{ success() && contains(github.event.head_commit.message, '+next') }}
    needs:
      - semver
    env:
      APPLICATION_VERSION: ${{ needs.semver.outputs.semver }}
      APPLICATION_VERSION_SNAPSHOT: ${{ needs.semver.outputs.snapshot }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup GO
        uses: ./.github/actions/install-go

      - run: echo "$APPLICATION_VERSION (snapshot = $APPLICATION_VERSION_SNAPSHOT)"
      - name: Build for release
        run: make build-api
      - name: Dist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-api
          path: |
            bin/**

  ts-cache-builder:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_AUTO_COMMIT }}
      - name: Setup NODE
        uses: ./.github/actions/install-node
        with:
          build-cache: "true"

  test-ts:
    runs-on: ubuntu-latest
    needs:
      - ts-cache-builder
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_AUTO_COMMIT }}
      - name: Setup NODE
        uses: ./.github/actions/install-node

      - name: Generate snapshots
        if: ${{ contains(github.event.head_commit.message, '+update-snapshots') }}
        run: make update-snapshots

      - name: Test and build WEB UI
        run: make test-web build-web

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: storybook-snapshots
          path: web/src/stories/__image_snapshots__/__diff_output__/

  build-ts-web:
    runs-on: ubuntu-latest
    if: ${{ success() && contains(github.event.head_commit.message, '+next') }}
    needs:
      - ts-cache-builder
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_AUTO_COMMIT }}
      - name: Setup NODE
        uses: ./.github/actions/install-node

      - name: Build for release
        run: make build-web

      - name: Dist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-web
          path: |
            web/build/**

  deploy-next:
    needs:
      - semver
      - test-terraform
      - test-go
      - test-ts
      - build-go-api
      - build-ts-web
    if: ${{ success() && contains(github.event.head_commit.message, '+next') }}
    uses: ./.github/workflows/lib-deploy.yml
    secrets: inherit
    with:
      target: next
      skip_terraform: ${{ needs.test-terraform.outputs.no_change }}
