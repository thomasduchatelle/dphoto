on:
  pull_request:
    branches:
      - main
      - develop

jobs:
#  tests:
#    uses: ./.github/workflows/feature-branch-ci.yml

  choose-env:
    runs-on: ubuntu-latest
    steps:
      - name: set environment based on the branch
        run: |
              case "${{ github.base_ref }}" in
                "main")
                  echo "::set-output name=environment-name::live" 
                  echo "::set-output name=environment-workspace::live"
                  ;;
              
                "develop")
                  echo "::set-output name=environment-name::dev" 
                  echo "::set-output name=environment-workspace::dev"
                  ;;
              
                *)
                  exit 1
                  ;;
              esac

  plan-data-infrastructure:
    runs-on: ubuntu-latest
#    environment:
#      name: ${{ jobs.choose-env.outputs.environment-name }}
    needs:
#      - tests
      - choose-env
#    env:
#      TF_WORKSPACE: ${{ jobs.choose-env.outputs.environment-workspace }}
    steps:
      - uses: actions/checkout@v3

      - run: |
          echo "Env name: ${{ jobs.choose-env.outputs.environment-name }}"
          echo "Env workspace: ${{ jobs.choose-env.outputs.environment-workspace }}"

      - name: Setup terraform
        uses: ./.github/actions/install-terraform
        with:
          tf-api-token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        run: cd infra-data && terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: cd infra-data && terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
