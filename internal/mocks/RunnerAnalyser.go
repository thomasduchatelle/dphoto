// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/pkg/backup"
)

// RunnerAnalyser is an autogenerated mock type for the RunnerAnalyser type
type RunnerAnalyser struct {
	mock.Mock
}

// Analyse provides a mock function with given fields: found, progressChannel
func (_m *RunnerAnalyser) Analyse(found backup.FoundMedia, progressChannel chan *backup.ProgressEvent) (*backup.AnalysedMedia, error) {
	ret := _m.Called(found, progressChannel)

	if len(ret) == 0 {
		panic("no return value specified for Analyse")
	}

	var r0 *backup.AnalysedMedia
	var r1 error
	if rf, ok := ret.Get(0).(func(backup.FoundMedia, chan *backup.ProgressEvent) (*backup.AnalysedMedia, error)); ok {
		return rf(found, progressChannel)
	}
	if rf, ok := ret.Get(0).(func(backup.FoundMedia, chan *backup.ProgressEvent) *backup.AnalysedMedia); ok {
		r0 = rf(found, progressChannel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.AnalysedMedia)
		}
	}

	if rf, ok := ret.Get(1).(func(backup.FoundMedia, chan *backup.ProgressEvent) error); ok {
		r1 = rf(found, progressChannel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRunnerAnalyser creates a new instance of RunnerAnalyser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunnerAnalyser(t interface {
	mock.TestingT
	Cleanup(func())
}) *RunnerAnalyser {
	mock := &RunnerAnalyser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
