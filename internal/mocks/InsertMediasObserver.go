// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"
)

// InsertMediasObserver is an autogenerated mock type for the InsertMediasObserver type
type InsertMediasObserver struct {
	mock.Mock
}

type InsertMediasObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *InsertMediasObserver) EXPECT() *InsertMediasObserver_Expecter {
	return &InsertMediasObserver_Expecter{mock: &_m.Mock}
}

// OnMediasInserted provides a mock function with given fields: _a0, _a1
func (_m *InsertMediasObserver) OnMediasInserted(_a0 context.Context, _a1 map[catalog.AlbumId][]catalog.MediaId) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OnMediasInserted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[catalog.AlbumId][]catalog.MediaId) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMediasObserver_OnMediasInserted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnMediasInserted'
type InsertMediasObserver_OnMediasInserted_Call struct {
	*mock.Call
}

// OnMediasInserted is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 map[catalog.AlbumId][]catalog.MediaId
func (_e *InsertMediasObserver_Expecter) OnMediasInserted(_a0 interface{}, _a1 interface{}) *InsertMediasObserver_OnMediasInserted_Call {
	return &InsertMediasObserver_OnMediasInserted_Call{Call: _e.mock.On("OnMediasInserted", _a0, _a1)}
}

func (_c *InsertMediasObserver_OnMediasInserted_Call) Run(run func(_a0 context.Context, _a1 map[catalog.AlbumId][]catalog.MediaId)) *InsertMediasObserver_OnMediasInserted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[catalog.AlbumId][]catalog.MediaId))
	})
	return _c
}

func (_c *InsertMediasObserver_OnMediasInserted_Call) Return(_a0 error) *InsertMediasObserver_OnMediasInserted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InsertMediasObserver_OnMediasInserted_Call) RunAndReturn(run func(context.Context, map[catalog.AlbumId][]catalog.MediaId) error) *InsertMediasObserver_OnMediasInserted_Call {
	_c.Call.Return(run)
	return _c
}

// NewInsertMediasObserver creates a new instance of InsertMediasObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInsertMediasObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *InsertMediasObserver {
	mock := &InsertMediasObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
