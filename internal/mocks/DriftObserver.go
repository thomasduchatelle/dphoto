// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalogviews "github.com/thomasduchatelle/dphoto/pkg/catalogviews"

	mock "github.com/stretchr/testify/mock"
)

// DriftObserver is an autogenerated mock type for the DriftObserver type
type DriftObserver struct {
	mock.Mock
}

type DriftObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *DriftObserver) EXPECT() *DriftObserver_Expecter {
	return &DriftObserver_Expecter{mock: &_m.Mock}
}

// OnDetectedDrifts provides a mock function with given fields: ctx, drifts
func (_m *DriftObserver) OnDetectedDrifts(ctx context.Context, drifts []catalogviews.Drift) error {
	ret := _m.Called(ctx, drifts)

	if len(ret) == 0 {
		panic("no return value specified for OnDetectedDrifts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []catalogviews.Drift) error); ok {
		r0 = rf(ctx, drifts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DriftObserver_OnDetectedDrifts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDetectedDrifts'
type DriftObserver_OnDetectedDrifts_Call struct {
	*mock.Call
}

// OnDetectedDrifts is a helper method to define mock.On call
//   - ctx context.Context
//   - drifts []catalogviews.Drift
func (_e *DriftObserver_Expecter) OnDetectedDrifts(ctx interface{}, drifts interface{}) *DriftObserver_OnDetectedDrifts_Call {
	return &DriftObserver_OnDetectedDrifts_Call{Call: _e.mock.On("OnDetectedDrifts", ctx, drifts)}
}

func (_c *DriftObserver_OnDetectedDrifts_Call) Run(run func(ctx context.Context, drifts []catalogviews.Drift)) *DriftObserver_OnDetectedDrifts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]catalogviews.Drift))
	})
	return _c
}

func (_c *DriftObserver_OnDetectedDrifts_Call) Return(_a0 error) *DriftObserver_OnDetectedDrifts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DriftObserver_OnDetectedDrifts_Call) RunAndReturn(run func(context.Context, []catalogviews.Drift) error) *DriftObserver_OnDetectedDrifts_Call {
	_c.Call.Return(run)
	return _c
}

// NewDriftObserver creates a new instance of DriftObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriftObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *DriftObserver {
	mock := &DriftObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
