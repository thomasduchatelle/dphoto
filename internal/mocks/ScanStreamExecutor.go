// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"

	mock "github.com/stretchr/testify/mock"
)

// ScanStreamExecutor is an autogenerated mock type for the ScanStreamExecutor type
type ScanStreamExecutor struct {
	mock.Mock
}

// Scan provides a mock function with given fields: input
func (_m *ScanStreamExecutor) Scan(input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 *dynamodb.ScanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput) (*dynamodb.ScanOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput) *dynamodb.ScanOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ScanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ScanInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScanStreamExecutor creates a new instance of ScanStreamExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanStreamExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScanStreamExecutor {
	mock := &ScanStreamExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
