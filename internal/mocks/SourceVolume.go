// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/pkg/backup"
)

// SourceVolume is an autogenerated mock type for the SourceVolume type
type SourceVolume struct {
	mock.Mock
}

type SourceVolume_Expecter struct {
	mock *mock.Mock
}

func (_m *SourceVolume) EXPECT() *SourceVolume_Expecter {
	return &SourceVolume_Expecter{mock: &_m.Mock}
}

// FindMedias provides a mock function with given fields:
func (_m *SourceVolume) FindMedias() ([]backup.FoundMedia, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindMedias")
	}

	var r0 []backup.FoundMedia
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]backup.FoundMedia, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []backup.FoundMedia); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]backup.FoundMedia)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SourceVolume_FindMedias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMedias'
type SourceVolume_FindMedias_Call struct {
	*mock.Call
}

// FindMedias is a helper method to define mock.On call
func (_e *SourceVolume_Expecter) FindMedias() *SourceVolume_FindMedias_Call {
	return &SourceVolume_FindMedias_Call{Call: _e.mock.On("FindMedias")}
}

func (_c *SourceVolume_FindMedias_Call) Run(run func()) *SourceVolume_FindMedias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SourceVolume_FindMedias_Call) Return(_a0 []backup.FoundMedia, _a1 error) *SourceVolume_FindMedias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SourceVolume_FindMedias_Call) RunAndReturn(run func() ([]backup.FoundMedia, error)) *SourceVolume_FindMedias_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *SourceVolume) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SourceVolume_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type SourceVolume_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *SourceVolume_Expecter) String() *SourceVolume_String_Call {
	return &SourceVolume_String_Call{Call: _e.mock.On("String")}
}

func (_c *SourceVolume_String_Call) Run(run func()) *SourceVolume_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SourceVolume_String_Call) Return(_a0 string) *SourceVolume_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SourceVolume_String_Call) RunAndReturn(run func() string) *SourceVolume_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewSourceVolume creates a new instance of SourceVolume. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSourceVolume(t interface {
	mock.TestingT
	Cleanup(func())
}) *SourceVolume {
	mock := &SourceVolume{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
