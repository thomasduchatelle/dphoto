// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	aclcore "github.com/thomasduchatelle/dphoto/pkg/acl/aclcore"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"
)

// ListScopesByOwnerPort is an autogenerated mock type for the ListScopesByOwnerPort type
type ListScopesByOwnerPort struct {
	mock.Mock
}

type ListScopesByOwnerPort_Expecter struct {
	mock *mock.Mock
}

func (_m *ListScopesByOwnerPort) EXPECT() *ListScopesByOwnerPort_Expecter {
	return &ListScopesByOwnerPort_Expecter{mock: &_m.Mock}
}

// ListScopesByOwner provides a mock function with given fields: owner, types
func (_m *ListScopesByOwnerPort) ListScopesByOwner(owner ownermodel.Owner, types ...aclcore.ScopeType) ([]*aclcore.Scope, error) {
	_va := make([]interface{}, len(types))
	for _i := range types {
		_va[_i] = types[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, owner)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScopesByOwner")
	}

	var r0 []*aclcore.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(ownermodel.Owner, ...aclcore.ScopeType) ([]*aclcore.Scope, error)); ok {
		return rf(owner, types...)
	}
	if rf, ok := ret.Get(0).(func(ownermodel.Owner, ...aclcore.ScopeType) []*aclcore.Scope); ok {
		r0 = rf(owner, types...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aclcore.Scope)
		}
	}

	if rf, ok := ret.Get(1).(func(ownermodel.Owner, ...aclcore.ScopeType) error); ok {
		r1 = rf(owner, types...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScopesByOwnerPort_ListScopesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScopesByOwner'
type ListScopesByOwnerPort_ListScopesByOwner_Call struct {
	*mock.Call
}

// ListScopesByOwner is a helper method to define mock.On call
//   - owner ownermodel.Owner
//   - types ...aclcore.ScopeType
func (_e *ListScopesByOwnerPort_Expecter) ListScopesByOwner(owner interface{}, types ...interface{}) *ListScopesByOwnerPort_ListScopesByOwner_Call {
	return &ListScopesByOwnerPort_ListScopesByOwner_Call{Call: _e.mock.On("ListScopesByOwner",
		append([]interface{}{owner}, types...)...)}
}

func (_c *ListScopesByOwnerPort_ListScopesByOwner_Call) Run(run func(owner ownermodel.Owner, types ...aclcore.ScopeType)) *ListScopesByOwnerPort_ListScopesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeType, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeType)
			}
		}
		run(args[0].(ownermodel.Owner), variadicArgs...)
	})
	return _c
}

func (_c *ListScopesByOwnerPort_ListScopesByOwner_Call) Return(_a0 []*aclcore.Scope, _a1 error) *ListScopesByOwnerPort_ListScopesByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListScopesByOwnerPort_ListScopesByOwner_Call) RunAndReturn(run func(ownermodel.Owner, ...aclcore.ScopeType) ([]*aclcore.Scope, error)) *ListScopesByOwnerPort_ListScopesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// NewListScopesByOwnerPort creates a new instance of ListScopesByOwnerPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListScopesByOwnerPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListScopesByOwnerPort {
	mock := &ListScopesByOwnerPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
