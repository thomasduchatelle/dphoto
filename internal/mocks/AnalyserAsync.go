// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backup "github.com/thomasduchatelle/dphoto/pkg/backup"

	mock "github.com/stretchr/testify/mock"
)

// AnalyserAsync is an autogenerated mock type for the AnalyserAsync type
type AnalyserAsync struct {
	mock.Mock
}

type AnalyserAsync_Expecter struct {
	mock *mock.Mock
}

func (_m *AnalyserAsync) EXPECT() *AnalyserAsync_Expecter {
	return &AnalyserAsync_Expecter{mock: &_m.Mock}
}

// Analyse provides a mock function with given fields: ctx, found, analysedMediaObserver, rejectedMediaObserver
func (_m *AnalyserAsync) Analyse(ctx context.Context, found backup.FoundMedia, analysedMediaObserver backup.AnalysedMediaObserver, rejectedMediaObserver backup.RejectedMediaObserver) {
	_m.Called(ctx, found, analysedMediaObserver, rejectedMediaObserver)
}

// AnalyserAsync_Analyse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Analyse'
type AnalyserAsync_Analyse_Call struct {
	*mock.Call
}

// Analyse is a helper method to define mock.On call
//   - ctx context.Context
//   - found backup.FoundMedia
//   - analysedMediaObserver backup.AnalysedMediaObserver
//   - rejectedMediaObserver backup.RejectedMediaObserver
func (_e *AnalyserAsync_Expecter) Analyse(ctx interface{}, found interface{}, analysedMediaObserver interface{}, rejectedMediaObserver interface{}) *AnalyserAsync_Analyse_Call {
	return &AnalyserAsync_Analyse_Call{Call: _e.mock.On("Analyse", ctx, found, analysedMediaObserver, rejectedMediaObserver)}
}

func (_c *AnalyserAsync_Analyse_Call) Run(run func(ctx context.Context, found backup.FoundMedia, analysedMediaObserver backup.AnalysedMediaObserver, rejectedMediaObserver backup.RejectedMediaObserver)) *AnalyserAsync_Analyse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(backup.FoundMedia), args[2].(backup.AnalysedMediaObserver), args[3].(backup.RejectedMediaObserver))
	})
	return _c
}

func (_c *AnalyserAsync_Analyse_Call) Return() *AnalyserAsync_Analyse_Call {
	_c.Call.Return()
	return _c
}

func (_c *AnalyserAsync_Analyse_Call) RunAndReturn(run func(context.Context, backup.FoundMedia, backup.AnalysedMediaObserver, backup.RejectedMediaObserver)) *AnalyserAsync_Analyse_Call {
	_c.Call.Return(run)
	return _c
}

// NewAnalyserAsync creates a new instance of AnalyserAsync. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyserAsync(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnalyserAsync {
	mock := &AnalyserAsync{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
