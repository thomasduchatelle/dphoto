// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backup "github.com/thomasduchatelle/dphoto/pkg/backup"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"
)

// MultiFilesBackup is an autogenerated mock type for the MultiFilesBackup type
type MultiFilesBackup struct {
	mock.Mock
}

type MultiFilesBackup_Expecter struct {
	mock *mock.Mock
}

func (_m *MultiFilesBackup) EXPECT() *MultiFilesBackup_Expecter {
	return &MultiFilesBackup_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, owner, volumeSource, optionsSlice
func (_m *MultiFilesBackup) Execute(ctx context.Context, owner ownermodel.Owner, volumeSource backup.SourceVolume, optionsSlice ...backup.Options) (backup.Report, error) {
	_va := make([]interface{}, len(optionsSlice))
	for _i := range optionsSlice {
		_va[_i] = optionsSlice[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, owner, volumeSource)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 backup.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, backup.SourceVolume, ...backup.Options) (backup.Report, error)); ok {
		return rf(ctx, owner, volumeSource, optionsSlice...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, backup.SourceVolume, ...backup.Options) backup.Report); ok {
		r0 = rf(ctx, owner, volumeSource, optionsSlice...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backup.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner, backup.SourceVolume, ...backup.Options) error); ok {
		r1 = rf(ctx, owner, volumeSource, optionsSlice...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiFilesBackup_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MultiFilesBackup_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
//   - volumeSource backup.SourceVolume
//   - optionsSlice ...backup.Options
func (_e *MultiFilesBackup_Expecter) Execute(ctx interface{}, owner interface{}, volumeSource interface{}, optionsSlice ...interface{}) *MultiFilesBackup_Execute_Call {
	return &MultiFilesBackup_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{ctx, owner, volumeSource}, optionsSlice...)...)}
}

func (_c *MultiFilesBackup_Execute_Call) Run(run func(ctx context.Context, owner ownermodel.Owner, volumeSource backup.SourceVolume, optionsSlice ...backup.Options)) *MultiFilesBackup_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]backup.Options, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(backup.Options)
			}
		}
		run(args[0].(context.Context), args[1].(ownermodel.Owner), args[2].(backup.SourceVolume), variadicArgs...)
	})
	return _c
}

func (_c *MultiFilesBackup_Execute_Call) Return(_a0 backup.Report, _a1 error) *MultiFilesBackup_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MultiFilesBackup_Execute_Call) RunAndReturn(run func(context.Context, ownermodel.Owner, backup.SourceVolume, ...backup.Options) (backup.Report, error)) *MultiFilesBackup_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMultiFilesBackup creates a new instance of MultiFilesBackup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMultiFilesBackup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MultiFilesBackup {
	mock := &MultiFilesBackup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
