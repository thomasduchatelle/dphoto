// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalogviews "github.com/thomasduchatelle/dphoto/pkg/catalogviews"

	mock "github.com/stretchr/testify/mock"

	usermodel "github.com/thomasduchatelle/dphoto/pkg/usermodel"
)

// GetAvailabilitiesByUserPort is an autogenerated mock type for the GetAvailabilitiesByUserPort type
type GetAvailabilitiesByUserPort struct {
	mock.Mock
}

type GetAvailabilitiesByUserPort_Expecter struct {
	mock *mock.Mock
}

func (_m *GetAvailabilitiesByUserPort) EXPECT() *GetAvailabilitiesByUserPort_Expecter {
	return &GetAvailabilitiesByUserPort_Expecter{mock: &_m.Mock}
}

// GetAvailabilitiesByUser provides a mock function with given fields: ctx, user
func (_m *GetAvailabilitiesByUserPort) GetAvailabilitiesByUser(ctx context.Context, user usermodel.UserId) ([]catalogviews.MultiUserAlbumSize, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailabilitiesByUser")
	}

	var r0 []catalogviews.MultiUserAlbumSize
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usermodel.UserId) ([]catalogviews.MultiUserAlbumSize, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usermodel.UserId) []catalogviews.MultiUserAlbumSize); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalogviews.MultiUserAlbumSize)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usermodel.UserId) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailabilitiesByUser'
type GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call struct {
	*mock.Call
}

// GetAvailabilitiesByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user usermodel.UserId
func (_e *GetAvailabilitiesByUserPort_Expecter) GetAvailabilitiesByUser(ctx interface{}, user interface{}) *GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call {
	return &GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call{Call: _e.mock.On("GetAvailabilitiesByUser", ctx, user)}
}

func (_c *GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call) Run(run func(ctx context.Context, user usermodel.UserId)) *GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usermodel.UserId))
	})
	return _c
}

func (_c *GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call) Return(_a0 []catalogviews.MultiUserAlbumSize, _a1 error) *GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call) RunAndReturn(run func(context.Context, usermodel.UserId) ([]catalogviews.MultiUserAlbumSize, error)) *GetAvailabilitiesByUserPort_GetAvailabilitiesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetAvailabilitiesByUserPort creates a new instance of GetAvailabilitiesByUserPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetAvailabilitiesByUserPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetAvailabilitiesByUserPort {
	mock := &GetAvailabilitiesByUserPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
