// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"

	time "time"
)

// AlbumLookupStrategy is an autogenerated mock type for the AlbumLookupStrategy type
type AlbumLookupStrategy struct {
	mock.Mock
}

type AlbumLookupStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *AlbumLookupStrategy) EXPECT() *AlbumLookupStrategy_Expecter {
	return &AlbumLookupStrategy_Expecter{mock: &_m.Mock}
}

// LookupAlbum provides a mock function with given fields: ctx, owner, timeline, mediaTime
func (_m *AlbumLookupStrategy) LookupAlbum(ctx context.Context, owner ownermodel.Owner, timeline *catalog.TimelineAggregate, mediaTime time.Time) (catalog.AlbumReference, error) {
	ret := _m.Called(ctx, owner, timeline, mediaTime)

	if len(ret) == 0 {
		panic("no return value specified for LookupAlbum")
	}

	var r0 catalog.AlbumReference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, *catalog.TimelineAggregate, time.Time) (catalog.AlbumReference, error)); ok {
		return rf(ctx, owner, timeline, mediaTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, *catalog.TimelineAggregate, time.Time) catalog.AlbumReference); ok {
		r0 = rf(ctx, owner, timeline, mediaTime)
	} else {
		r0 = ret.Get(0).(catalog.AlbumReference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner, *catalog.TimelineAggregate, time.Time) error); ok {
		r1 = rf(ctx, owner, timeline, mediaTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlbumLookupStrategy_LookupAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupAlbum'
type AlbumLookupStrategy_LookupAlbum_Call struct {
	*mock.Call
}

// LookupAlbum is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
//   - timeline *catalog.TimelineAggregate
//   - mediaTime time.Time
func (_e *AlbumLookupStrategy_Expecter) LookupAlbum(ctx interface{}, owner interface{}, timeline interface{}, mediaTime interface{}) *AlbumLookupStrategy_LookupAlbum_Call {
	return &AlbumLookupStrategy_LookupAlbum_Call{Call: _e.mock.On("LookupAlbum", ctx, owner, timeline, mediaTime)}
}

func (_c *AlbumLookupStrategy_LookupAlbum_Call) Run(run func(ctx context.Context, owner ownermodel.Owner, timeline *catalog.TimelineAggregate, mediaTime time.Time)) *AlbumLookupStrategy_LookupAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ownermodel.Owner), args[2].(*catalog.TimelineAggregate), args[3].(time.Time))
	})
	return _c
}

func (_c *AlbumLookupStrategy_LookupAlbum_Call) Return(_a0 catalog.AlbumReference, _a1 error) *AlbumLookupStrategy_LookupAlbum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlbumLookupStrategy_LookupAlbum_Call) RunAndReturn(run func(context.Context, ownermodel.Owner, *catalog.TimelineAggregate, time.Time) (catalog.AlbumReference, error)) *AlbumLookupStrategy_LookupAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlbumLookupStrategy creates a new instance of AlbumLookupStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumLookupStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumLookupStrategy {
	mock := &AlbumLookupStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
