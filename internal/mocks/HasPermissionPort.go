// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	aclcore "github.com/thomasduchatelle/dphoto/pkg/acl/aclcore"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HasPermissionPort is an autogenerated mock type for the HasPermissionPort type
type HasPermissionPort struct {
	mock.Mock
}

type HasPermissionPort_Expecter struct {
	mock *mock.Mock
}

func (_m *HasPermissionPort) EXPECT() *HasPermissionPort_Expecter {
	return &HasPermissionPort_Expecter{mock: &_m.Mock}
}

// FindScopesByIdCtx provides a mock function with given fields: ctx, ids
func (_m *HasPermissionPort) FindScopesByIdCtx(ctx context.Context, ids ...aclcore.ScopeId) ([]*aclcore.Scope, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindScopesByIdCtx")
	}

	var r0 []*aclcore.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...aclcore.ScopeId) ([]*aclcore.Scope, error)); ok {
		return rf(ctx, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...aclcore.ScopeId) []*aclcore.Scope); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aclcore.Scope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...aclcore.ScopeId) error); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPermissionPort_FindScopesByIdCtx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindScopesByIdCtx'
type HasPermissionPort_FindScopesByIdCtx_Call struct {
	*mock.Call
}

// FindScopesByIdCtx is a helper method to define mock.On call
//   - ctx context.Context
//   - ids ...aclcore.ScopeId
func (_e *HasPermissionPort_Expecter) FindScopesByIdCtx(ctx interface{}, ids ...interface{}) *HasPermissionPort_FindScopesByIdCtx_Call {
	return &HasPermissionPort_FindScopesByIdCtx_Call{Call: _e.mock.On("FindScopesByIdCtx",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *HasPermissionPort_FindScopesByIdCtx_Call) Run(run func(ctx context.Context, ids ...aclcore.ScopeId)) *HasPermissionPort_FindScopesByIdCtx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeId, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeId)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *HasPermissionPort_FindScopesByIdCtx_Call) Return(_a0 []*aclcore.Scope, _a1 error) *HasPermissionPort_FindScopesByIdCtx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HasPermissionPort_FindScopesByIdCtx_Call) RunAndReturn(run func(context.Context, ...aclcore.ScopeId) ([]*aclcore.Scope, error)) *HasPermissionPort_FindScopesByIdCtx_Call {
	_c.Call.Return(run)
	return _c
}

// NewHasPermissionPort creates a new instance of HasPermissionPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasPermissionPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *HasPermissionPort {
	mock := &HasPermissionPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
