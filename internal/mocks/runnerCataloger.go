// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/pkg/backup"
)

// runnerCataloger is an autogenerated mock type for the runnerCataloger type
type runnerCataloger struct {
	mock.Mock
}

// Execute provides a mock function with given fields: medias, progressChannel
func (_m *runnerCataloger) Execute(medias []*backup.AnalysedMedia, progressChannel chan *backup.ProgressEvent) ([]*backup.BackingUpMediaRequest, error) {
	ret := _m.Called(medias, progressChannel)

	var r0 []*backup.BackingUpMediaRequest
	var r1 error
	if rf, ok := ret.Get(0).(func([]*backup.AnalysedMedia, chan *backup.ProgressEvent) ([]*backup.BackingUpMediaRequest, error)); ok {
		return rf(medias, progressChannel)
	}
	if rf, ok := ret.Get(0).(func([]*backup.AnalysedMedia, chan *backup.ProgressEvent) []*backup.BackingUpMediaRequest); ok {
		r0 = rf(medias, progressChannel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*backup.BackingUpMediaRequest)
		}
	}

	if rf, ok := ret.Get(1).(func([]*backup.AnalysedMedia, chan *backup.ProgressEvent) error); ok {
		r1 = rf(medias, progressChannel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewRunnerCataloger interface {
	mock.TestingT
	Cleanup(func())
}

// newRunnerCataloger creates a new instance of runnerCataloger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newRunnerCataloger(t mockConstructorTestingTnewRunnerCataloger) *runnerCataloger {
	mock := &runnerCataloger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
