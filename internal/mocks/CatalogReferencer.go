// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backup "github.com/thomasduchatelle/dphoto/pkg/backup"

	mock "github.com/stretchr/testify/mock"
)

// CatalogReferencer is an autogenerated mock type for the CatalogReferencer type
type CatalogReferencer struct {
	mock.Mock
}

type CatalogReferencer_Expecter struct {
	mock *mock.Mock
}

func (_m *CatalogReferencer) EXPECT() *CatalogReferencer_Expecter {
	return &CatalogReferencer_Expecter{mock: &_m.Mock}
}

// Reference provides a mock function with given fields: ctx, medias
func (_m *CatalogReferencer) Reference(ctx context.Context, medias []*backup.AnalysedMedia) (map[*backup.AnalysedMedia]backup.CatalogReference, error) {
	ret := _m.Called(ctx, medias)

	if len(ret) == 0 {
		panic("no return value specified for Catalog")
	}

	var r0 map[*backup.AnalysedMedia]backup.CatalogReference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*backup.AnalysedMedia) (map[*backup.AnalysedMedia]backup.CatalogReference, error)); ok {
		return rf(ctx, medias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*backup.AnalysedMedia) map[*backup.AnalysedMedia]backup.CatalogReference); ok {
		r0 = rf(ctx, medias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*backup.AnalysedMedia]backup.CatalogReference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*backup.AnalysedMedia) error); ok {
		r1 = rf(ctx, medias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogReferencer_Reference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Catalog'
type CatalogReferencer_Reference_Call struct {
	*mock.Call
}

// Reference is a helper method to define mock.On call
//   - ctx context.Context
//   - medias []*backup.AnalysedMedia
func (_e *CatalogReferencer_Expecter) Reference(ctx interface{}, medias interface{}) *CatalogReferencer_Reference_Call {
	return &CatalogReferencer_Reference_Call{Call: _e.mock.On("Catalog", ctx, medias)}
}

func (_c *CatalogReferencer_Reference_Call) Run(run func(ctx context.Context, medias []*backup.AnalysedMedia)) *CatalogReferencer_Reference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*backup.AnalysedMedia))
	})
	return _c
}

func (_c *CatalogReferencer_Reference_Call) Return(_a0 map[*backup.AnalysedMedia]backup.CatalogReference, _a1 error) *CatalogReferencer_Reference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogReferencer_Reference_Call) RunAndReturn(run func(context.Context, []*backup.AnalysedMedia) (map[*backup.AnalysedMedia]backup.CatalogReference, error)) *CatalogReferencer_Reference_Call {
	_c.Call.Return(run)
	return _c
}

// NewCatalogReferencer creates a new instance of CatalogReferencer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogReferencer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CatalogReferencer {
	mock := &CatalogReferencer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
