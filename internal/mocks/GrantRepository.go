// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	aclcore "github.com/thomasduchatelle/dphoto/pkg/acl/aclcore"

	context "context"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"

	usermodel "github.com/thomasduchatelle/dphoto/pkg/usermodel"
)

// GrantRepository is an autogenerated mock type for the GrantRepository type
type GrantRepository struct {
	mock.Mock
}

type GrantRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GrantRepository) EXPECT() *GrantRepository_Expecter {
	return &GrantRepository_Expecter{mock: &_m.Mock}
}

// DeleteScopes provides a mock function with given fields: id
func (_m *GrantRepository) DeleteScopes(id ...aclcore.ScopeId) error {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScopes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...aclcore.ScopeId) error); ok {
		r0 = rf(id...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantRepository_DeleteScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScopes'
type GrantRepository_DeleteScopes_Call struct {
	*mock.Call
}

// DeleteScopes is a helper method to define mock.On call
//   - id ...aclcore.ScopeId
func (_e *GrantRepository_Expecter) DeleteScopes(id ...interface{}) *GrantRepository_DeleteScopes_Call {
	return &GrantRepository_DeleteScopes_Call{Call: _e.mock.On("DeleteScopes",
		append([]interface{}{}, id...)...)}
}

func (_c *GrantRepository_DeleteScopes_Call) Run(run func(id ...aclcore.ScopeId)) *GrantRepository_DeleteScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeId, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeId)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *GrantRepository_DeleteScopes_Call) Return(_a0 error) *GrantRepository_DeleteScopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrantRepository_DeleteScopes_Call) RunAndReturn(run func(...aclcore.ScopeId) error) *GrantRepository_DeleteScopes_Call {
	_c.Call.Return(run)
	return _c
}

// FindScopesById provides a mock function with given fields: ids
func (_m *GrantRepository) FindScopesById(ids ...aclcore.ScopeId) ([]*aclcore.Scope, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindScopesById")
	}

	var r0 []*aclcore.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(...aclcore.ScopeId) ([]*aclcore.Scope, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...aclcore.ScopeId) []*aclcore.Scope); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aclcore.Scope)
		}
	}

	if rf, ok := ret.Get(1).(func(...aclcore.ScopeId) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantRepository_FindScopesById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindScopesById'
type GrantRepository_FindScopesById_Call struct {
	*mock.Call
}

// FindScopesById is a helper method to define mock.On call
//   - ids ...aclcore.ScopeId
func (_e *GrantRepository_Expecter) FindScopesById(ids ...interface{}) *GrantRepository_FindScopesById_Call {
	return &GrantRepository_FindScopesById_Call{Call: _e.mock.On("FindScopesById",
		append([]interface{}{}, ids...)...)}
}

func (_c *GrantRepository_FindScopesById_Call) Run(run func(ids ...aclcore.ScopeId)) *GrantRepository_FindScopesById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeId, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeId)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *GrantRepository_FindScopesById_Call) Return(_a0 []*aclcore.Scope, _a1 error) *GrantRepository_FindScopesById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrantRepository_FindScopesById_Call) RunAndReturn(run func(...aclcore.ScopeId) ([]*aclcore.Scope, error)) *GrantRepository_FindScopesById_Call {
	_c.Call.Return(run)
	return _c
}

// ListScopesByOwner provides a mock function with given fields: ctx, owner, types
func (_m *GrantRepository) ListScopesByOwner(ctx context.Context, owner ownermodel.Owner, types ...aclcore.ScopeType) ([]*aclcore.Scope, error) {
	_va := make([]interface{}, len(types))
	for _i := range types {
		_va[_i] = types[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, owner)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScopesByOwner")
	}

	var r0 []*aclcore.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, ...aclcore.ScopeType) ([]*aclcore.Scope, error)); ok {
		return rf(ctx, owner, types...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, ...aclcore.ScopeType) []*aclcore.Scope); ok {
		r0 = rf(ctx, owner, types...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aclcore.Scope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner, ...aclcore.ScopeType) error); ok {
		r1 = rf(ctx, owner, types...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantRepository_ListScopesByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScopesByOwner'
type GrantRepository_ListScopesByOwner_Call struct {
	*mock.Call
}

// ListScopesByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
//   - types ...aclcore.ScopeType
func (_e *GrantRepository_Expecter) ListScopesByOwner(ctx interface{}, owner interface{}, types ...interface{}) *GrantRepository_ListScopesByOwner_Call {
	return &GrantRepository_ListScopesByOwner_Call{Call: _e.mock.On("ListScopesByOwner",
		append([]interface{}{ctx, owner}, types...)...)}
}

func (_c *GrantRepository_ListScopesByOwner_Call) Run(run func(ctx context.Context, owner ownermodel.Owner, types ...aclcore.ScopeType)) *GrantRepository_ListScopesByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeType, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeType)
			}
		}
		run(args[0].(context.Context), args[1].(ownermodel.Owner), variadicArgs...)
	})
	return _c
}

func (_c *GrantRepository_ListScopesByOwner_Call) Return(_a0 []*aclcore.Scope, _a1 error) *GrantRepository_ListScopesByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrantRepository_ListScopesByOwner_Call) RunAndReturn(run func(context.Context, ownermodel.Owner, ...aclcore.ScopeType) ([]*aclcore.Scope, error)) *GrantRepository_ListScopesByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// ListScopesByOwners provides a mock function with given fields: ctx, owners, types
func (_m *GrantRepository) ListScopesByOwners(ctx context.Context, owners []ownermodel.Owner, types ...aclcore.ScopeType) ([]*aclcore.Scope, error) {
	_va := make([]interface{}, len(types))
	for _i := range types {
		_va[_i] = types[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, owners)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScopesByOwners")
	}

	var r0 []*aclcore.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ownermodel.Owner, ...aclcore.ScopeType) ([]*aclcore.Scope, error)); ok {
		return rf(ctx, owners, types...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ownermodel.Owner, ...aclcore.ScopeType) []*aclcore.Scope); ok {
		r0 = rf(ctx, owners, types...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aclcore.Scope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ownermodel.Owner, ...aclcore.ScopeType) error); ok {
		r1 = rf(ctx, owners, types...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantRepository_ListScopesByOwners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScopesByOwners'
type GrantRepository_ListScopesByOwners_Call struct {
	*mock.Call
}

// ListScopesByOwners is a helper method to define mock.On call
//   - ctx context.Context
//   - owners []ownermodel.Owner
//   - types ...aclcore.ScopeType
func (_e *GrantRepository_Expecter) ListScopesByOwners(ctx interface{}, owners interface{}, types ...interface{}) *GrantRepository_ListScopesByOwners_Call {
	return &GrantRepository_ListScopesByOwners_Call{Call: _e.mock.On("ListScopesByOwners",
		append([]interface{}{ctx, owners}, types...)...)}
}

func (_c *GrantRepository_ListScopesByOwners_Call) Run(run func(ctx context.Context, owners []ownermodel.Owner, types ...aclcore.ScopeType)) *GrantRepository_ListScopesByOwners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeType, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeType)
			}
		}
		run(args[0].(context.Context), args[1].([]ownermodel.Owner), variadicArgs...)
	})
	return _c
}

func (_c *GrantRepository_ListScopesByOwners_Call) Return(_a0 []*aclcore.Scope, _a1 error) *GrantRepository_ListScopesByOwners_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrantRepository_ListScopesByOwners_Call) RunAndReturn(run func(context.Context, []ownermodel.Owner, ...aclcore.ScopeType) ([]*aclcore.Scope, error)) *GrantRepository_ListScopesByOwners_Call {
	_c.Call.Return(run)
	return _c
}

// ListScopesByUser provides a mock function with given fields: ctx, email, types
func (_m *GrantRepository) ListScopesByUser(ctx context.Context, email usermodel.UserId, types ...aclcore.ScopeType) ([]*aclcore.Scope, error) {
	_va := make([]interface{}, len(types))
	for _i := range types {
		_va[_i] = types[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, email)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScopesByUser")
	}

	var r0 []*aclcore.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usermodel.UserId, ...aclcore.ScopeType) ([]*aclcore.Scope, error)); ok {
		return rf(ctx, email, types...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usermodel.UserId, ...aclcore.ScopeType) []*aclcore.Scope); ok {
		r0 = rf(ctx, email, types...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aclcore.Scope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usermodel.UserId, ...aclcore.ScopeType) error); ok {
		r1 = rf(ctx, email, types...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantRepository_ListScopesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScopesByUser'
type GrantRepository_ListScopesByUser_Call struct {
	*mock.Call
}

// ListScopesByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email usermodel.UserId
//   - types ...aclcore.ScopeType
func (_e *GrantRepository_Expecter) ListScopesByUser(ctx interface{}, email interface{}, types ...interface{}) *GrantRepository_ListScopesByUser_Call {
	return &GrantRepository_ListScopesByUser_Call{Call: _e.mock.On("ListScopesByUser",
		append([]interface{}{ctx, email}, types...)...)}
}

func (_c *GrantRepository_ListScopesByUser_Call) Run(run func(ctx context.Context, email usermodel.UserId, types ...aclcore.ScopeType)) *GrantRepository_ListScopesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeType, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeType)
			}
		}
		run(args[0].(context.Context), args[1].(usermodel.UserId), variadicArgs...)
	})
	return _c
}

func (_c *GrantRepository_ListScopesByUser_Call) Return(_a0 []*aclcore.Scope, _a1 error) *GrantRepository_ListScopesByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrantRepository_ListScopesByUser_Call) RunAndReturn(run func(context.Context, usermodel.UserId, ...aclcore.ScopeType) ([]*aclcore.Scope, error)) *GrantRepository_ListScopesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveIfNewScope provides a mock function with given fields: scope
func (_m *GrantRepository) SaveIfNewScope(scope aclcore.Scope) error {
	ret := _m.Called(scope)

	if len(ret) == 0 {
		panic("no return value specified for SaveIfNewScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(aclcore.Scope) error); ok {
		r0 = rf(scope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantRepository_SaveIfNewScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveIfNewScope'
type GrantRepository_SaveIfNewScope_Call struct {
	*mock.Call
}

// SaveIfNewScope is a helper method to define mock.On call
//   - scope aclcore.Scope
func (_e *GrantRepository_Expecter) SaveIfNewScope(scope interface{}) *GrantRepository_SaveIfNewScope_Call {
	return &GrantRepository_SaveIfNewScope_Call{Call: _e.mock.On("SaveIfNewScope", scope)}
}

func (_c *GrantRepository_SaveIfNewScope_Call) Run(run func(scope aclcore.Scope)) *GrantRepository_SaveIfNewScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(aclcore.Scope))
	})
	return _c
}

func (_c *GrantRepository_SaveIfNewScope_Call) Return(_a0 error) *GrantRepository_SaveIfNewScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrantRepository_SaveIfNewScope_Call) RunAndReturn(run func(aclcore.Scope) error) *GrantRepository_SaveIfNewScope_Call {
	_c.Call.Return(run)
	return _c
}

// NewGrantRepository creates a new instance of GrantRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGrantRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GrantRepository {
	mock := &GrantRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
