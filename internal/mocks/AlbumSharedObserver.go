// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	context "context"

	mock "github.com/stretchr/testify/mock"

	usermodel "github.com/thomasduchatelle/dphoto/pkg/usermodel"
)

// AlbumSharedObserver is an autogenerated mock type for the AlbumSharedObserver type
type AlbumSharedObserver struct {
	mock.Mock
}

type AlbumSharedObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *AlbumSharedObserver) EXPECT() *AlbumSharedObserver_Expecter {
	return &AlbumSharedObserver_Expecter{mock: &_m.Mock}
}

// AlbumShared provides a mock function with given fields: ctx, albumId, userEmail
func (_m *AlbumSharedObserver) AlbumShared(ctx context.Context, albumId catalog.AlbumId, userEmail usermodel.UserId) error {
	ret := _m.Called(ctx, albumId, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for AlbumShared")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AlbumId, usermodel.UserId) error); ok {
		r0 = rf(ctx, albumId, userEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AlbumSharedObserver_AlbumShared_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AlbumShared'
type AlbumSharedObserver_AlbumShared_Call struct {
	*mock.Call
}

// AlbumShared is a helper method to define mock.On call
//   - ctx context.Context
//   - albumId catalog.AlbumId
//   - userEmail usermodel.UserId
func (_e *AlbumSharedObserver_Expecter) AlbumShared(ctx interface{}, albumId interface{}, userEmail interface{}) *AlbumSharedObserver_AlbumShared_Call {
	return &AlbumSharedObserver_AlbumShared_Call{Call: _e.mock.On("AlbumShared", ctx, albumId, userEmail)}
}

func (_c *AlbumSharedObserver_AlbumShared_Call) Run(run func(ctx context.Context, albumId catalog.AlbumId, userEmail usermodel.UserId)) *AlbumSharedObserver_AlbumShared_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AlbumId), args[2].(usermodel.UserId))
	})
	return _c
}

func (_c *AlbumSharedObserver_AlbumShared_Call) Return(_a0 error) *AlbumSharedObserver_AlbumShared_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlbumSharedObserver_AlbumShared_Call) RunAndReturn(run func(context.Context, catalog.AlbumId, usermodel.UserId) error) *AlbumSharedObserver_AlbumShared_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlbumSharedObserver creates a new instance of AlbumSharedObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumSharedObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumSharedObserver {
	mock := &AlbumSharedObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
