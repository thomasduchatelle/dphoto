// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	archive "github.com/thomasduchatelle/dphoto/pkg/archive"
)

// AsyncJobAdapter is an autogenerated mock type for the AsyncJobAdapter type
type AsyncJobAdapter struct {
	mock.Mock
}

// LoadImagesInCache provides a mock function with given fields: images
func (_m *AsyncJobAdapter) LoadImagesInCache(images ...*archive.ImageToResize) error {
	_va := make([]interface{}, len(images))
	for _i := range images {
		_va[_i] = images[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LoadImagesInCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...*archive.ImageToResize) error); ok {
		r0 = rf(images...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WarmUpCacheByFolder provides a mock function with given fields: owner, missedStoreKey, width
func (_m *AsyncJobAdapter) WarmUpCacheByFolder(owner string, missedStoreKey string, width int) error {
	ret := _m.Called(owner, missedStoreKey, width)

	if len(ret) == 0 {
		panic("no return value specified for WarmUpCacheByFolder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(owner, missedStoreKey, width)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAsyncJobAdapter creates a new instance of AsyncJobAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncJobAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncJobAdapter {
	mock := &AsyncJobAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
