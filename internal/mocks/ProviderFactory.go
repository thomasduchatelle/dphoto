// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalogviews "github.com/thomasduchatelle/dphoto/pkg/catalogviews"

	mock "github.com/stretchr/testify/mock"
)

// ProviderFactory is an autogenerated mock type for the ProviderFactory type
type ProviderFactory struct {
	mock.Mock
}

type ProviderFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ProviderFactory) EXPECT() *ProviderFactory_Expecter {
	return &ProviderFactory_Expecter{mock: &_m.Mock}
}

// NewProvider provides a mock function with given fields: ctx, mediaCounterPort
func (_m *ProviderFactory) NewProvider(ctx context.Context, mediaCounterPort catalogviews.MediaCounterPort) catalogviews.ListAlbumsProvider {
	ret := _m.Called(ctx, mediaCounterPort)

	if len(ret) == 0 {
		panic("no return value specified for NewProvider")
	}

	var r0 catalogviews.ListAlbumsProvider
	if rf, ok := ret.Get(0).(func(context.Context, catalogviews.MediaCounterPort) catalogviews.ListAlbumsProvider); ok {
		r0 = rf(ctx, mediaCounterPort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalogviews.ListAlbumsProvider)
		}
	}

	return r0
}

// ProviderFactory_NewProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewProvider'
type ProviderFactory_NewProvider_Call struct {
	*mock.Call
}

// NewProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaCounterPort catalogviews.MediaCounterPort
func (_e *ProviderFactory_Expecter) NewProvider(ctx interface{}, mediaCounterPort interface{}) *ProviderFactory_NewProvider_Call {
	return &ProviderFactory_NewProvider_Call{Call: _e.mock.On("NewProvider", ctx, mediaCounterPort)}
}

func (_c *ProviderFactory_NewProvider_Call) Run(run func(ctx context.Context, mediaCounterPort catalogviews.MediaCounterPort)) *ProviderFactory_NewProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalogviews.MediaCounterPort))
	})
	return _c
}

func (_c *ProviderFactory_NewProvider_Call) Return(_a0 catalogviews.ListAlbumsProvider) *ProviderFactory_NewProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProviderFactory_NewProvider_Call) RunAndReturn(run func(context.Context, catalogviews.MediaCounterPort) catalogviews.ListAlbumsProvider) *ProviderFactory_NewProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewProviderFactory creates a new instance of ProviderFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProviderFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProviderFactory {
	mock := &ProviderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
