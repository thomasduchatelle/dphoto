// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// GetStreamAdapter is an autogenerated mock type for the GetStreamAdapter type
type GetStreamAdapter struct {
	mock.Mock
}

type GetStreamAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *GetStreamAdapter) EXPECT() *GetStreamAdapter_Expecter {
	return &GetStreamAdapter_Expecter{mock: &_m.Mock}
}

// BatchGet provides a mock function with given fields: ctx, key
func (_m *GetStreamAdapter) BatchGet(ctx context.Context, key []map[string]types.AttributeValue) (*dynamodb.BatchGetItemOutput, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BatchGet")
	}

	var r0 *dynamodb.BatchGetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []map[string]types.AttributeValue) (*dynamodb.BatchGetItemOutput, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []map[string]types.AttributeValue) *dynamodb.BatchGetItemOutput); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchGetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []map[string]types.AttributeValue) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamAdapter_BatchGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGet'
type GetStreamAdapter_BatchGet_Call struct {
	*mock.Call
}

// BatchGet is a helper method to define mock.On call
//   - ctx context.Context
//   - key []map[string]types.AttributeValue
func (_e *GetStreamAdapter_Expecter) BatchGet(ctx interface{}, key interface{}) *GetStreamAdapter_BatchGet_Call {
	return &GetStreamAdapter_BatchGet_Call{Call: _e.mock.On("BatchGet", ctx, key)}
}

func (_c *GetStreamAdapter_BatchGet_Call) Run(run func(ctx context.Context, key []map[string]types.AttributeValue)) *GetStreamAdapter_BatchGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]map[string]types.AttributeValue))
	})
	return _c
}

func (_c *GetStreamAdapter_BatchGet_Call) Return(_a0 *dynamodb.BatchGetItemOutput, _a1 error) *GetStreamAdapter_BatchGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetStreamAdapter_BatchGet_Call) RunAndReturn(run func(context.Context, []map[string]types.AttributeValue) (*dynamodb.BatchGetItemOutput, error)) *GetStreamAdapter_BatchGet_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetStreamAdapter creates a new instance of GetStreamAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetStreamAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetStreamAdapter {
	mock := &GetStreamAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
