// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backup "github.com/thomasduchatelle/dphoto/pkg/backup"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"
)

// ReferencerFactory is an autogenerated mock type for the ReferencerFactory type
type ReferencerFactory struct {
	mock.Mock
}

type ReferencerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ReferencerFactory) EXPECT() *ReferencerFactory_Expecter {
	return &ReferencerFactory_Expecter{mock: &_m.Mock}
}

// NewCreatorReferencer provides a mock function with given fields: ctx, owner
func (_m *ReferencerFactory) NewCreatorReferencer(ctx context.Context, owner ownermodel.Owner) (backup.CatalogReferencer, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for NewCreatorReferencer")
	}

	var r0 backup.CatalogReferencer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner) (backup.CatalogReferencer, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner) backup.CatalogReferencer); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backup.CatalogReferencer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReferencerFactory_NewCreatorReferencer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCreatorReferencer'
type ReferencerFactory_NewCreatorReferencer_Call struct {
	*mock.Call
}

// NewCreatorReferencer is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
func (_e *ReferencerFactory_Expecter) NewCreatorReferencer(ctx interface{}, owner interface{}) *ReferencerFactory_NewCreatorReferencer_Call {
	return &ReferencerFactory_NewCreatorReferencer_Call{Call: _e.mock.On("NewCreatorReferencer", ctx, owner)}
}

func (_c *ReferencerFactory_NewCreatorReferencer_Call) Run(run func(ctx context.Context, owner ownermodel.Owner)) *ReferencerFactory_NewCreatorReferencer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ownermodel.Owner))
	})
	return _c
}

func (_c *ReferencerFactory_NewCreatorReferencer_Call) Return(_a0 backup.CatalogReferencer, _a1 error) *ReferencerFactory_NewCreatorReferencer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReferencerFactory_NewCreatorReferencer_Call) RunAndReturn(run func(context.Context, ownermodel.Owner) (backup.CatalogReferencer, error)) *ReferencerFactory_NewCreatorReferencer_Call {
	_c.Call.Return(run)
	return _c
}

// NewDryRunReferencer provides a mock function with given fields: ctx, owner
func (_m *ReferencerFactory) NewDryRunReferencer(ctx context.Context, owner ownermodel.Owner) (backup.CatalogReferencer, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for NewDryRunReferencer")
	}

	var r0 backup.CatalogReferencer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner) (backup.CatalogReferencer, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner) backup.CatalogReferencer); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backup.CatalogReferencer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReferencerFactory_NewDryRunReferencer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDryRunReferencer'
type ReferencerFactory_NewDryRunReferencer_Call struct {
	*mock.Call
}

// NewDryRunReferencer is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
func (_e *ReferencerFactory_Expecter) NewDryRunReferencer(ctx interface{}, owner interface{}) *ReferencerFactory_NewDryRunReferencer_Call {
	return &ReferencerFactory_NewDryRunReferencer_Call{Call: _e.mock.On("NewDryRunReferencer", ctx, owner)}
}

func (_c *ReferencerFactory_NewDryRunReferencer_Call) Run(run func(ctx context.Context, owner ownermodel.Owner)) *ReferencerFactory_NewDryRunReferencer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ownermodel.Owner))
	})
	return _c
}

func (_c *ReferencerFactory_NewDryRunReferencer_Call) Return(_a0 backup.CatalogReferencer, _a1 error) *ReferencerFactory_NewDryRunReferencer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReferencerFactory_NewDryRunReferencer_Call) RunAndReturn(run func(context.Context, ownermodel.Owner) (backup.CatalogReferencer, error)) *ReferencerFactory_NewDryRunReferencer_Call {
	_c.Call.Return(run)
	return _c
}

// NewReferencerFactory creates a new instance of ReferencerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReferencerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReferencerFactory {
	mock := &ReferencerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
