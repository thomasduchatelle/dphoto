// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"
)

// CatalogInsertMedia is an autogenerated mock type for the CatalogInsertMedia type
type CatalogInsertMedia struct {
	mock.Mock
}

type CatalogInsertMedia_Expecter struct {
	mock *mock.Mock
}

func (_m *CatalogInsertMedia) EXPECT() *CatalogInsertMedia_Expecter {
	return &CatalogInsertMedia_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, owner, medias
func (_m *CatalogInsertMedia) Insert(ctx context.Context, owner ownermodel.Owner, medias []catalog.CreateMediaRequest) error {
	ret := _m.Called(ctx, owner, medias)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, []catalog.CreateMediaRequest) error); ok {
		r0 = rf(ctx, owner, medias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CatalogInsertMedia_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type CatalogInsertMedia_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
//   - medias []catalog.CreateMediaRequest
func (_e *CatalogInsertMedia_Expecter) Insert(ctx interface{}, owner interface{}, medias interface{}) *CatalogInsertMedia_Insert_Call {
	return &CatalogInsertMedia_Insert_Call{Call: _e.mock.On("Insert", ctx, owner, medias)}
}

func (_c *CatalogInsertMedia_Insert_Call) Run(run func(ctx context.Context, owner ownermodel.Owner, medias []catalog.CreateMediaRequest)) *CatalogInsertMedia_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ownermodel.Owner), args[2].([]catalog.CreateMediaRequest))
	})
	return _c
}

func (_c *CatalogInsertMedia_Insert_Call) Return(_a0 error) *CatalogInsertMedia_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogInsertMedia_Insert_Call) RunAndReturn(run func(context.Context, ownermodel.Owner, []catalog.CreateMediaRequest) error) *CatalogInsertMedia_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewCatalogInsertMedia creates a new instance of CatalogInsertMedia. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogInsertMedia(t interface {
	mock.TestingT
	Cleanup(func())
}) *CatalogInsertMedia {
	mock := &CatalogInsertMedia{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
