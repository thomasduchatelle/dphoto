// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	archive "github.com/thomasduchatelle/dphoto/pkg/archive"

	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

type Factory_Expecter struct {
	mock *mock.Mock
}

func (_m *Factory) EXPECT() *Factory_Expecter {
	return &Factory_Expecter{mock: &_m.Mock}
}

// ArchiveAsyncJobAdapter provides a mock function with given fields: ctx
func (_m *Factory) ArchiveAsyncJobAdapter(ctx context.Context) archive.AsyncJobAdapter {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveAsyncJobAdapter")
	}

	var r0 archive.AsyncJobAdapter
	if rf, ok := ret.Get(0).(func(context.Context) archive.AsyncJobAdapter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(archive.AsyncJobAdapter)
		}
	}

	return r0
}

// Factory_ArchiveAsyncJobAdapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArchiveAsyncJobAdapter'
type Factory_ArchiveAsyncJobAdapter_Call struct {
	*mock.Call
}

// ArchiveAsyncJobAdapter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) ArchiveAsyncJobAdapter(ctx interface{}) *Factory_ArchiveAsyncJobAdapter_Call {
	return &Factory_ArchiveAsyncJobAdapter_Call{Call: _e.mock.On("ArchiveAsyncJobAdapter", ctx)}
}

func (_c *Factory_ArchiveAsyncJobAdapter_Call) Run(run func(ctx context.Context)) *Factory_ArchiveAsyncJobAdapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_ArchiveAsyncJobAdapter_Call) Return(_a0 archive.AsyncJobAdapter) *Factory_ArchiveAsyncJobAdapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Factory_ArchiveAsyncJobAdapter_Call) RunAndReturn(run func(context.Context) archive.AsyncJobAdapter) *Factory_ArchiveAsyncJobAdapter_Call {
	_c.Call.Return(run)
	return _c
}

// InitArchive provides a mock function with given fields: ctx
func (_m *Factory) InitArchive(ctx context.Context) {
	_m.Called(ctx)
}

// Factory_InitArchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitArchive'
type Factory_InitArchive_Call struct {
	*mock.Call
}

// InitArchive is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Factory_Expecter) InitArchive(ctx interface{}) *Factory_InitArchive_Call {
	return &Factory_InitArchive_Call{Call: _e.mock.On("InitArchive", ctx)}
}

func (_c *Factory_InitArchive_Call) Run(run func(ctx context.Context)) *Factory_InitArchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Factory_InitArchive_Call) Return() *Factory_InitArchive_Call {
	_c.Call.Return()
	return _c
}

func (_c *Factory_InitArchive_Call) RunAndReturn(run func(context.Context)) *Factory_InitArchive_Call {
	_c.Call.Return(run)
	return _c
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
