// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	context "context"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"

	usermodel "github.com/thomasduchatelle/dphoto/pkg/usermodel"
)

// GetAlbumSharingGridPort is an autogenerated mock type for the GetAlbumSharingGridPort type
type GetAlbumSharingGridPort struct {
	mock.Mock
}

type GetAlbumSharingGridPort_Expecter struct {
	mock *mock.Mock
}

func (_m *GetAlbumSharingGridPort) EXPECT() *GetAlbumSharingGridPort_Expecter {
	return &GetAlbumSharingGridPort_Expecter{mock: &_m.Mock}
}

// GetAlbumSharingGrid provides a mock function with given fields: ctx, owner
func (_m *GetAlbumSharingGridPort) GetAlbumSharingGrid(ctx context.Context, owner ownermodel.Owner) (map[catalog.AlbumId][]usermodel.UserId, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumSharingGrid")
	}

	var r0 map[catalog.AlbumId][]usermodel.UserId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner) (map[catalog.AlbumId][]usermodel.UserId, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner) map[catalog.AlbumId][]usermodel.UserId); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[catalog.AlbumId][]usermodel.UserId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbumSharingGridPort_GetAlbumSharingGrid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlbumSharingGrid'
type GetAlbumSharingGridPort_GetAlbumSharingGrid_Call struct {
	*mock.Call
}

// GetAlbumSharingGrid is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
func (_e *GetAlbumSharingGridPort_Expecter) GetAlbumSharingGrid(ctx interface{}, owner interface{}) *GetAlbumSharingGridPort_GetAlbumSharingGrid_Call {
	return &GetAlbumSharingGridPort_GetAlbumSharingGrid_Call{Call: _e.mock.On("GetAlbumSharingGrid", ctx, owner)}
}

func (_c *GetAlbumSharingGridPort_GetAlbumSharingGrid_Call) Run(run func(ctx context.Context, owner ownermodel.Owner)) *GetAlbumSharingGridPort_GetAlbumSharingGrid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ownermodel.Owner))
	})
	return _c
}

func (_c *GetAlbumSharingGridPort_GetAlbumSharingGrid_Call) Return(_a0 map[catalog.AlbumId][]usermodel.UserId, _a1 error) *GetAlbumSharingGridPort_GetAlbumSharingGrid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetAlbumSharingGridPort_GetAlbumSharingGrid_Call) RunAndReturn(run func(context.Context, ownermodel.Owner) (map[catalog.AlbumId][]usermodel.UserId, error)) *GetAlbumSharingGridPort_GetAlbumSharingGrid_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetAlbumSharingGridPort creates a new instance of GetAlbumSharingGridPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetAlbumSharingGridPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetAlbumSharingGridPort {
	mock := &GetAlbumSharingGridPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
