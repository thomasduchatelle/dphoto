// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"
)

// TransferMediasFunc is an autogenerated mock type for the TransferMediasFunc type
type TransferMediasFunc struct {
	mock.Mock
}

type TransferMediasFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *TransferMediasFunc) EXPECT() *TransferMediasFunc_Expecter {
	return &TransferMediasFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, records
func (_m *TransferMediasFunc) Execute(ctx context.Context, records catalog.MediaTransferRecords) (catalog.TransferredMedias, error) {
	ret := _m.Called(ctx, records)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 catalog.TransferredMedias
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.MediaTransferRecords) (catalog.TransferredMedias, error)); ok {
		return rf(ctx, records)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.MediaTransferRecords) catalog.TransferredMedias); ok {
		r0 = rf(ctx, records)
	} else {
		r0 = ret.Get(0).(catalog.TransferredMedias)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.MediaTransferRecords) error); ok {
		r1 = rf(ctx, records)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferMediasFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type TransferMediasFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - records catalog.MediaTransferRecords
func (_e *TransferMediasFunc_Expecter) Execute(ctx interface{}, records interface{}) *TransferMediasFunc_Execute_Call {
	return &TransferMediasFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, records)}
}

func (_c *TransferMediasFunc_Execute_Call) Run(run func(ctx context.Context, records catalog.MediaTransferRecords)) *TransferMediasFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.MediaTransferRecords))
	})
	return _c
}

func (_c *TransferMediasFunc_Execute_Call) Return(_a0 catalog.TransferredMedias, _a1 error) *TransferMediasFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransferMediasFunc_Execute_Call) RunAndReturn(run func(context.Context, catalog.MediaTransferRecords) (catalog.TransferredMedias, error)) *TransferMediasFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransferMediasFunc creates a new instance of TransferMediasFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransferMediasFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransferMediasFunc {
	mock := &TransferMediasFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
