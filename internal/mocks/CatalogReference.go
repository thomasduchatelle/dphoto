// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CatalogReference is an autogenerated mock type for the CatalogReference type
type CatalogReference struct {
	mock.Mock
}

type CatalogReference_Expecter struct {
	mock *mock.Mock
}

func (_m *CatalogReference) EXPECT() *CatalogReference_Expecter {
	return &CatalogReference_Expecter{mock: &_m.Mock}
}

// AlbumCreated provides a mock function with given fields:
func (_m *CatalogReference) AlbumCreated() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AlbumCreated")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CatalogReference_AlbumCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AlbumCreated'
type CatalogReference_AlbumCreated_Call struct {
	*mock.Call
}

// AlbumCreated is a helper method to define mock.On call
func (_e *CatalogReference_Expecter) AlbumCreated() *CatalogReference_AlbumCreated_Call {
	return &CatalogReference_AlbumCreated_Call{Call: _e.mock.On("AlbumCreated")}
}

func (_c *CatalogReference_AlbumCreated_Call) Run(run func()) *CatalogReference_AlbumCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CatalogReference_AlbumCreated_Call) Return(_a0 bool) *CatalogReference_AlbumCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogReference_AlbumCreated_Call) RunAndReturn(run func() bool) *CatalogReference_AlbumCreated_Call {
	_c.Call.Return(run)
	return _c
}

// AlbumFolderName provides a mock function with given fields:
func (_m *CatalogReference) AlbumFolderName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AlbumFolderName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CatalogReference_AlbumFolderName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AlbumFolderName'
type CatalogReference_AlbumFolderName_Call struct {
	*mock.Call
}

// AlbumFolderName is a helper method to define mock.On call
func (_e *CatalogReference_Expecter) AlbumFolderName() *CatalogReference_AlbumFolderName_Call {
	return &CatalogReference_AlbumFolderName_Call{Call: _e.mock.On("AlbumFolderName")}
}

func (_c *CatalogReference_AlbumFolderName_Call) Run(run func()) *CatalogReference_AlbumFolderName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CatalogReference_AlbumFolderName_Call) Return(_a0 string) *CatalogReference_AlbumFolderName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogReference_AlbumFolderName_Call) RunAndReturn(run func() string) *CatalogReference_AlbumFolderName_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields:
func (_m *CatalogReference) Exists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CatalogReference_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type CatalogReference_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
func (_e *CatalogReference_Expecter) Exists() *CatalogReference_Exists_Call {
	return &CatalogReference_Exists_Call{Call: _e.mock.On("Exists")}
}

func (_c *CatalogReference_Exists_Call) Run(run func()) *CatalogReference_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CatalogReference_Exists_Call) Return(_a0 bool) *CatalogReference_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogReference_Exists_Call) RunAndReturn(run func() bool) *CatalogReference_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// MediaId provides a mock function with given fields:
func (_m *CatalogReference) UniqueIdentifier() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UniqueIdentifier")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CatalogReference_MediaId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UniqueIdentifier'
type CatalogReference_MediaId_Call struct {
	*mock.Call
}

// MediaId is a helper method to define mock.On call
func (_e *CatalogReference_Expecter) MediaId() *CatalogReference_MediaId_Call {
	return &CatalogReference_MediaId_Call{Call: _e.mock.On("UniqueIdentifier")}
}

func (_c *CatalogReference_MediaId_Call) Run(run func()) *CatalogReference_MediaId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CatalogReference_MediaId_Call) Return(_a0 string) *CatalogReference_MediaId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogReference_MediaId_Call) RunAndReturn(run func() string) *CatalogReference_MediaId_Call {
	_c.Call.Return(run)
	return _c
}

// NewCatalogReference creates a new instance of CatalogReference. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogReference(t interface {
	mock.TestingT
	Cleanup(func())
}) *CatalogReference {
	mock := &CatalogReference{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
