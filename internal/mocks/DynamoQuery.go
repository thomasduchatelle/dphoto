// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"

	mock "github.com/stretchr/testify/mock"
)

// DynamoQuery is an autogenerated mock type for the DynamoQuery type
type DynamoQuery struct {
	mock.Mock
}

// Query provides a mock function with given fields: d
func (_m *DynamoQuery) Query(d *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *dynamodb.QueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) (*dynamodb.QueryOutput, error)); ok {
		return rf(d)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) *dynamodb.QueryOutput); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.QueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.QueryInput) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDynamoQuery creates a new instance of DynamoQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDynamoQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *DynamoQuery {
	mock := &DynamoQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
