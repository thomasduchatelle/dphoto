// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryContract is an autogenerated mock type for the RepositoryContract type
type RepositoryContract struct {
	mock.Mock
}

// DeleteEmptyAlbum provides a mock function with given fields: id
func (_m *RepositoryContract) DeleteEmptyAlbum(id catalog.AlbumId) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmptyAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(catalog.AlbumId) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAlbums provides a mock function with given fields: ids
func (_m *RepositoryContract) FindAlbums(ids ...catalog.AlbumId) ([]*catalog.Album, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindAlbums")
	}

	var r0 []*catalog.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(...catalog.AlbumId) ([]*catalog.Album, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...catalog.AlbumId) []*catalog.Album); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(...catalog.AlbumId) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAlbumsByOwner provides a mock function with given fields: owner
func (_m *RepositoryContract) FindAlbumsByOwner(owner catalog.Owner) ([]*catalog.Album, error) {
	ret := _m.Called(owner)

	if len(ret) == 0 {
		panic("no return value specified for FindAlbumsByOwner")
	}

	var r0 []*catalog.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(catalog.Owner) ([]*catalog.Album, error)); ok {
		return rf(owner)
	}
	if rf, ok := ret.Get(0).(func(catalog.Owner) []*catalog.Album); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(catalog.Owner) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExistingSignatures provides a mock function with given fields: owner, signatures
func (_m *RepositoryContract) FindExistingSignatures(owner catalog.Owner, signatures []*catalog.MediaSignature) ([]*catalog.MediaSignature, error) {
	ret := _m.Called(owner, signatures)

	if len(ret) == 0 {
		panic("no return value specified for FindExistingSignatures")
	}

	var r0 []*catalog.MediaSignature
	var r1 error
	if rf, ok := ret.Get(0).(func(catalog.Owner, []*catalog.MediaSignature) ([]*catalog.MediaSignature, error)); ok {
		return rf(owner, signatures)
	}
	if rf, ok := ret.Get(0).(func(catalog.Owner, []*catalog.MediaSignature) []*catalog.MediaSignature); ok {
		r0 = rf(owner, signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.MediaSignature)
		}
	}

	if rf, ok := ret.Get(1).(func(catalog.Owner, []*catalog.MediaSignature) error); ok {
		r1 = rf(owner, signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMediaCurrentAlbum provides a mock function with given fields: owner, mediaId
func (_m *RepositoryContract) FindMediaCurrentAlbum(owner catalog.Owner, mediaId catalog.MediaId) (*catalog.AlbumId, error) {
	ret := _m.Called(owner, mediaId)

	if len(ret) == 0 {
		panic("no return value specified for FindMediaCurrentAlbum")
	}

	var r0 *catalog.AlbumId
	var r1 error
	if rf, ok := ret.Get(0).(func(catalog.Owner, catalog.MediaId) (*catalog.AlbumId, error)); ok {
		return rf(owner, mediaId)
	}
	if rf, ok := ret.Get(0).(func(catalog.Owner, catalog.MediaId) *catalog.AlbumId); ok {
		r0 = rf(owner, mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AlbumId)
		}
	}

	if rf, ok := ret.Get(1).(func(catalog.Owner, catalog.MediaId) error); ok {
		r1 = rf(owner, mediaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMediaIds provides a mock function with given fields: request
func (_m *RepositoryContract) FindMediaIds(request *catalog.FindMediaRequest) ([]catalog.MediaId, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for FindMediaIds")
	}

	var r0 []catalog.MediaId
	var r1 error
	if rf, ok := ret.Get(0).(func(*catalog.FindMediaRequest) ([]catalog.MediaId, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*catalog.FindMediaRequest) []catalog.MediaId); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MediaId)
		}
	}

	if rf, ok := ret.Get(1).(func(*catalog.FindMediaRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMedias provides a mock function with given fields: request
func (_m *RepositoryContract) FindMedias(request *catalog.FindMediaRequest) ([]*catalog.MediaMeta, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for FindMedias")
	}

	var r0 []*catalog.MediaMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(*catalog.FindMediaRequest) ([]*catalog.MediaMeta, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*catalog.FindMediaRequest) []*catalog.MediaMeta); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.MediaMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(*catalog.FindMediaRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAlbum provides a mock function with given fields: album
func (_m *RepositoryContract) InsertAlbum(album catalog.Album) error {
	ret := _m.Called(album)

	if len(ret) == 0 {
		panic("no return value specified for InsertAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(catalog.Album) error); ok {
		r0 = rf(album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMedias provides a mock function with given fields: owner, media
func (_m *RepositoryContract) InsertMedias(owner catalog.Owner, media []catalog.CreateMediaRequest) error {
	ret := _m.Called(owner, media)

	if len(ret) == 0 {
		panic("no return value specified for InsertMedias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(catalog.Owner, []catalog.CreateMediaRequest) error); ok {
		r0 = rf(owner, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferMedias provides a mock function with given fields: owner, mediaIds, newFolderName
func (_m *RepositoryContract) TransferMedias(owner catalog.Owner, mediaIds []catalog.MediaId, newFolderName catalog.FolderName) error {
	ret := _m.Called(owner, mediaIds, newFolderName)

	if len(ret) == 0 {
		panic("no return value specified for TransferMedias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(catalog.Owner, []catalog.MediaId, catalog.FolderName) error); ok {
		r0 = rf(owner, mediaIds, newFolderName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferMediasFromRecords provides a mock function with given fields: ctx, records
func (_m *RepositoryContract) TransferMediasFromRecords(ctx context.Context, records catalog.MediaTransferRecords) (catalog.TransferredMedias, error) {
	ret := _m.Called(ctx, records)

	if len(ret) == 0 {
		panic("no return value specified for TransferMediasFromRecords")
	}

	var r0 catalog.TransferredMedias
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.MediaTransferRecords) (catalog.TransferredMedias, error)); ok {
		return rf(ctx, records)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.MediaTransferRecords) catalog.TransferredMedias); ok {
		r0 = rf(ctx, records)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.TransferredMedias)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.MediaTransferRecords) error); ok {
		r1 = rf(ctx, records)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlbum provides a mock function with given fields: album
func (_m *RepositoryContract) UpdateAlbum(album catalog.Album) error {
	ret := _m.Called(album)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(catalog.Album) error); ok {
		r0 = rf(album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryContract creates a new instance of RepositoryContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryContract {
	mock := &RepositoryContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
