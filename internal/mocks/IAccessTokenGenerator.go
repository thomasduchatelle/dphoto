// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	aclcore "github.com/thomasduchatelle/dphoto/pkg/acl/aclcore"
)

// IAccessTokenGenerator is an autogenerated mock type for the IAccessTokenGenerator type
type IAccessTokenGenerator struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: email
func (_m *IAccessTokenGenerator) GenerateAccessToken(email string) (*aclcore.Authentication, error) {
	ret := _m.Called(email)

	var r0 *aclcore.Authentication
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*aclcore.Authentication, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *aclcore.Authentication); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aclcore.Authentication)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIAccessTokenGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAccessTokenGenerator creates a new instance of IAccessTokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAccessTokenGenerator(t mockConstructorTestingTNewIAccessTokenGenerator) *IAccessTokenGenerator {
	mock := &IAccessTokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
