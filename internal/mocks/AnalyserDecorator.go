// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/pkg/backup"
)

// AnalyserDecorator is an autogenerated mock type for the AnalyserDecorator type
type AnalyserDecorator struct {
	mock.Mock
}

type AnalyserDecorator_Expecter struct {
	mock *mock.Mock
}

func (_m *AnalyserDecorator) EXPECT() *AnalyserDecorator_Expecter {
	return &AnalyserDecorator_Expecter{mock: &_m.Mock}
}

// Decorate provides a mock function with given fields: analyseFunc, observers
func (_m *AnalyserDecorator) Decorate(analyseFunc backup.Analyser, observers ...backup.AnalyserDecoratorObserver) backup.Analyser {
	_va := make([]interface{}, len(observers))
	for _i := range observers {
		_va[_i] = observers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, analyseFunc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Decorate")
	}

	var r0 backup.Analyser
	if rf, ok := ret.Get(0).(func(backup.Analyser, ...backup.AnalyserDecoratorObserver) backup.Analyser); ok {
		r0 = rf(analyseFunc, observers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backup.Analyser)
		}
	}

	return r0
}

// AnalyserDecorator_Decorate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decorate'
type AnalyserDecorator_Decorate_Call struct {
	*mock.Call
}

// Decorate is a helper method to define mock.On call
//   - analyseFunc backup.Analyser
//   - observers ...backup.AnalyserDecoratorObserver
func (_e *AnalyserDecorator_Expecter) Decorate(analyseFunc interface{}, observers ...interface{}) *AnalyserDecorator_Decorate_Call {
	return &AnalyserDecorator_Decorate_Call{Call: _e.mock.On("Decorate",
		append([]interface{}{analyseFunc}, observers...)...)}
}

func (_c *AnalyserDecorator_Decorate_Call) Run(run func(analyseFunc backup.Analyser, observers ...backup.AnalyserDecoratorObserver)) *AnalyserDecorator_Decorate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]backup.AnalyserDecoratorObserver, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(backup.AnalyserDecoratorObserver)
			}
		}
		run(args[0].(backup.Analyser), variadicArgs...)
	})
	return _c
}

func (_c *AnalyserDecorator_Decorate_Call) Return(_a0 backup.Analyser) *AnalyserDecorator_Decorate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AnalyserDecorator_Decorate_Call) RunAndReturn(run func(backup.Analyser, ...backup.AnalyserDecoratorObserver) backup.Analyser) *AnalyserDecorator_Decorate_Call {
	_c.Call.Return(run)
	return _c
}

// NewAnalyserDecorator creates a new instance of AnalyserDecorator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyserDecorator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnalyserDecorator {
	mock := &AnalyserDecorator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
