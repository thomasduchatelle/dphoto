// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/pkg/backup"
)

// AnalyserDecorator is an autogenerated mock type for the AnalyserDecorator type
type AnalyserDecorator struct {
	mock.Mock
}

// Decorate provides a mock function with given fields: analyseFunc
func (_m *AnalyserDecorator) Decorate(analyseFunc backup.RunnerAnalyser) backup.RunnerAnalyser {
	ret := _m.Called(analyseFunc)

	if len(ret) == 0 {
		panic("no return value specified for Decorate")
	}

	var r0 backup.RunnerAnalyser
	if rf, ok := ret.Get(0).(func(backup.RunnerAnalyser) backup.RunnerAnalyser); ok {
		r0 = rf(analyseFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backup.RunnerAnalyser)
		}
	}

	return r0
}

// NewAnalyserDecorator creates a new instance of AnalyserDecorator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyserDecorator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnalyserDecorator {
	mock := &AnalyserDecorator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
