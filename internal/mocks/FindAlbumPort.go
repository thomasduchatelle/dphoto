// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FindAlbumPort is an autogenerated mock type for the FindAlbumPort type
type FindAlbumPort struct {
	mock.Mock
}

type FindAlbumPort_Expecter struct {
	mock *mock.Mock
}

func (_m *FindAlbumPort) EXPECT() *FindAlbumPort_Expecter {
	return &FindAlbumPort_Expecter{mock: &_m.Mock}
}

// FindAlbum provides a mock function with given fields: ctx, albumId
func (_m *FindAlbumPort) FindAlbum(ctx context.Context, albumId catalog.AlbumId) (*catalog.Album, error) {
	ret := _m.Called(ctx, albumId)

	if len(ret) == 0 {
		panic("no return value specified for FindAlbum")
	}

	var r0 *catalog.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AlbumId) (*catalog.Album, error)); ok {
		return rf(ctx, albumId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AlbumId) *catalog.Album); ok {
		r0 = rf(ctx, albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.AlbumId) error); ok {
		r1 = rf(ctx, albumId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAlbumPort_FindAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAlbum'
type FindAlbumPort_FindAlbum_Call struct {
	*mock.Call
}

// FindAlbum is a helper method to define mock.On call
//   - ctx context.Context
//   - albumId catalog.AlbumId
func (_e *FindAlbumPort_Expecter) FindAlbum(ctx interface{}, albumId interface{}) *FindAlbumPort_FindAlbum_Call {
	return &FindAlbumPort_FindAlbum_Call{Call: _e.mock.On("FindAlbum", ctx, albumId)}
}

func (_c *FindAlbumPort_FindAlbum_Call) Run(run func(ctx context.Context, albumId catalog.AlbumId)) *FindAlbumPort_FindAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AlbumId))
	})
	return _c
}

func (_c *FindAlbumPort_FindAlbum_Call) Return(_a0 *catalog.Album, _a1 error) *FindAlbumPort_FindAlbum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FindAlbumPort_FindAlbum_Call) RunAndReturn(run func(context.Context, catalog.AlbumId) (*catalog.Album, error)) *FindAlbumPort_FindAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewFindAlbumPort creates a new instance of FindAlbumPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindAlbumPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindAlbumPort {
	mock := &FindAlbumPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
