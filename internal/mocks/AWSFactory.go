// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	aws "github.com/aws/aws-sdk-go-v2/aws"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"

	mock "github.com/stretchr/testify/mock"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"

	sns "github.com/aws/aws-sdk-go-v2/service/sns"

	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
)

// AWSFactory is an autogenerated mock type for the AWSFactory type
type AWSFactory struct {
	mock.Mock
}

type AWSFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *AWSFactory) EXPECT() *AWSFactory_Expecter {
	return &AWSFactory_Expecter{mock: &_m.Mock}
}

// GetCfg provides a mock function with given fields:
func (_m *AWSFactory) GetCfg() aws.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCfg")
	}

	var r0 aws.Config
	if rf, ok := ret.Get(0).(func() aws.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(aws.Config)
	}

	return r0
}

// AWSFactory_GetCfg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCfg'
type AWSFactory_GetCfg_Call struct {
	*mock.Call
}

// GetCfg is a helper method to define mock.On call
func (_e *AWSFactory_Expecter) GetCfg() *AWSFactory_GetCfg_Call {
	return &AWSFactory_GetCfg_Call{Call: _e.mock.On("GetCfg")}
}

func (_c *AWSFactory_GetCfg_Call) Run(run func()) *AWSFactory_GetCfg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSFactory_GetCfg_Call) Return(_a0 aws.Config) *AWSFactory_GetCfg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSFactory_GetCfg_Call) RunAndReturn(run func() aws.Config) *AWSFactory_GetCfg_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamoDBClient provides a mock function with given fields:
func (_m *AWSFactory) GetDynamoDBClient() *dynamodb.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamoDBClient")
	}

	var r0 *dynamodb.Client
	if rf, ok := ret.Get(0).(func() *dynamodb.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.Client)
		}
	}

	return r0
}

// AWSFactory_GetDynamoDBClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamoDBClient'
type AWSFactory_GetDynamoDBClient_Call struct {
	*mock.Call
}

// GetDynamoDBClient is a helper method to define mock.On call
func (_e *AWSFactory_Expecter) GetDynamoDBClient() *AWSFactory_GetDynamoDBClient_Call {
	return &AWSFactory_GetDynamoDBClient_Call{Call: _e.mock.On("GetDynamoDBClient")}
}

func (_c *AWSFactory_GetDynamoDBClient_Call) Run(run func()) *AWSFactory_GetDynamoDBClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSFactory_GetDynamoDBClient_Call) Return(_a0 *dynamodb.Client) *AWSFactory_GetDynamoDBClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSFactory_GetDynamoDBClient_Call) RunAndReturn(run func() *dynamodb.Client) *AWSFactory_GetDynamoDBClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetS3Client provides a mock function with given fields:
func (_m *AWSFactory) GetS3Client() *s3.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetS3Client")
	}

	var r0 *s3.Client
	if rf, ok := ret.Get(0).(func() *s3.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Client)
		}
	}

	return r0
}

// AWSFactory_GetS3Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetS3Client'
type AWSFactory_GetS3Client_Call struct {
	*mock.Call
}

// GetS3Client is a helper method to define mock.On call
func (_e *AWSFactory_Expecter) GetS3Client() *AWSFactory_GetS3Client_Call {
	return &AWSFactory_GetS3Client_Call{Call: _e.mock.On("GetS3Client")}
}

func (_c *AWSFactory_GetS3Client_Call) Run(run func()) *AWSFactory_GetS3Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSFactory_GetS3Client_Call) Return(_a0 *s3.Client) *AWSFactory_GetS3Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSFactory_GetS3Client_Call) RunAndReturn(run func() *s3.Client) *AWSFactory_GetS3Client_Call {
	_c.Call.Return(run)
	return _c
}

// GetSNSClient provides a mock function with given fields:
func (_m *AWSFactory) GetSNSClient() *sns.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSNSClient")
	}

	var r0 *sns.Client
	if rf, ok := ret.Get(0).(func() *sns.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.Client)
		}
	}

	return r0
}

// AWSFactory_GetSNSClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSNSClient'
type AWSFactory_GetSNSClient_Call struct {
	*mock.Call
}

// GetSNSClient is a helper method to define mock.On call
func (_e *AWSFactory_Expecter) GetSNSClient() *AWSFactory_GetSNSClient_Call {
	return &AWSFactory_GetSNSClient_Call{Call: _e.mock.On("GetSNSClient")}
}

func (_c *AWSFactory_GetSNSClient_Call) Run(run func()) *AWSFactory_GetSNSClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSFactory_GetSNSClient_Call) Return(_a0 *sns.Client) *AWSFactory_GetSNSClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSFactory_GetSNSClient_Call) RunAndReturn(run func() *sns.Client) *AWSFactory_GetSNSClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetSQSClient provides a mock function with given fields:
func (_m *AWSFactory) GetSQSClient() *sqs.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSQSClient")
	}

	var r0 *sqs.Client
	if rf, ok := ret.Get(0).(func() *sqs.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.Client)
		}
	}

	return r0
}

// AWSFactory_GetSQSClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSQSClient'
type AWSFactory_GetSQSClient_Call struct {
	*mock.Call
}

// GetSQSClient is a helper method to define mock.On call
func (_e *AWSFactory_Expecter) GetSQSClient() *AWSFactory_GetSQSClient_Call {
	return &AWSFactory_GetSQSClient_Call{Call: _e.mock.On("GetSQSClient")}
}

func (_c *AWSFactory_GetSQSClient_Call) Run(run func()) *AWSFactory_GetSQSClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AWSFactory_GetSQSClient_Call) Return(_a0 *sqs.Client) *AWSFactory_GetSQSClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AWSFactory_GetSQSClient_Call) RunAndReturn(run func() *sqs.Client) *AWSFactory_GetSQSClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewAWSFactory creates a new instance of AWSFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAWSFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *AWSFactory {
	mock := &AWSFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
