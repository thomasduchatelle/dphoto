// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RenameAlbumPort is an autogenerated mock type for the RenameAlbumPort type
type RenameAlbumPort struct {
	mock.Mock
}

type RenameAlbumPort_Expecter struct {
	mock *mock.Mock
}

func (_m *RenameAlbumPort) EXPECT() *RenameAlbumPort_Expecter {
	return &RenameAlbumPort_Expecter{mock: &_m.Mock}
}

// RenameAlbum provides a mock function with given fields: folderName, newName, renameFolder
func (_m *RenameAlbumPort) RenameAlbum(folderName string, newName string, renameFolder bool) error {
	ret := _m.Called(folderName, newName, renameFolder)

	if len(ret) == 0 {
		panic("no return value specified for RenameAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(folderName, newName, renameFolder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameAlbumPort_RenameAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameAlbum'
type RenameAlbumPort_RenameAlbum_Call struct {
	*mock.Call
}

// RenameAlbum is a helper method to define mock.On call
//   - folderName string
//   - newName string
//   - renameFolder bool
func (_e *RenameAlbumPort_Expecter) RenameAlbum(folderName interface{}, newName interface{}, renameFolder interface{}) *RenameAlbumPort_RenameAlbum_Call {
	return &RenameAlbumPort_RenameAlbum_Call{Call: _e.mock.On("RenameAlbum", folderName, newName, renameFolder)}
}

func (_c *RenameAlbumPort_RenameAlbum_Call) Run(run func(folderName string, newName string, renameFolder bool)) *RenameAlbumPort_RenameAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *RenameAlbumPort_RenameAlbum_Call) Return(_a0 error) *RenameAlbumPort_RenameAlbum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RenameAlbumPort_RenameAlbum_Call) RunAndReturn(run func(string, string, bool) error) *RenameAlbumPort_RenameAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewRenameAlbumPort creates a new instance of RenameAlbumPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRenameAlbumPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *RenameAlbumPort {
	mock := &RenameAlbumPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
