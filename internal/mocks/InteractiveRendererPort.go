// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	ui "github.com/thomasduchatelle/dphoto/cmd/dphoto/cmd/ui"
)

// InteractiveRendererPort is an autogenerated mock type for the InteractiveRendererPort type
type InteractiveRendererPort struct {
	mock.Mock
}

type InteractiveRendererPort_Expecter struct {
	mock *mock.Mock
}

func (_m *InteractiveRendererPort) EXPECT() *InteractiveRendererPort_Expecter {
	return &InteractiveRendererPort_Expecter{mock: &_m.Mock}
}

// Height provides a mock function with given fields:
func (_m *InteractiveRendererPort) Height() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Height")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// InteractiveRendererPort_Height_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Height'
type InteractiveRendererPort_Height_Call struct {
	*mock.Call
}

// Height is a helper method to define mock.On call
func (_e *InteractiveRendererPort_Expecter) Height() *InteractiveRendererPort_Height_Call {
	return &InteractiveRendererPort_Height_Call{Call: _e.mock.On("Height")}
}

func (_c *InteractiveRendererPort_Height_Call) Run(run func()) *InteractiveRendererPort_Height_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InteractiveRendererPort_Height_Call) Return(_a0 int) *InteractiveRendererPort_Height_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InteractiveRendererPort_Height_Call) RunAndReturn(run func() int) *InteractiveRendererPort_Height_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function with given fields: question
func (_m *InteractiveRendererPort) Print(question string) {
	_m.Called(question)
}

// InteractiveRendererPort_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type InteractiveRendererPort_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - question string
func (_e *InteractiveRendererPort_Expecter) Print(question interface{}) *InteractiveRendererPort_Print_Call {
	return &InteractiveRendererPort_Print_Call{Call: _e.mock.On("Print", question)}
}

func (_c *InteractiveRendererPort_Print_Call) Run(run func(question string)) *InteractiveRendererPort_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *InteractiveRendererPort_Print_Call) Return() *InteractiveRendererPort_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *InteractiveRendererPort_Print_Call) RunAndReturn(run func(string)) *InteractiveRendererPort_Print_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAnswer provides a mock function with given fields:
func (_m *InteractiveRendererPort) ReadAnswer() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadAnswer")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InteractiveRendererPort_ReadAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAnswer'
type InteractiveRendererPort_ReadAnswer_Call struct {
	*mock.Call
}

// ReadAnswer is a helper method to define mock.On call
func (_e *InteractiveRendererPort_Expecter) ReadAnswer() *InteractiveRendererPort_ReadAnswer_Call {
	return &InteractiveRendererPort_ReadAnswer_Call{Call: _e.mock.On("ReadAnswer")}
}

func (_c *InteractiveRendererPort_ReadAnswer_Call) Run(run func()) *InteractiveRendererPort_ReadAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InteractiveRendererPort_ReadAnswer_Call) Return(_a0 string, _a1 error) *InteractiveRendererPort_ReadAnswer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InteractiveRendererPort_ReadAnswer_Call) RunAndReturn(run func() (string, error)) *InteractiveRendererPort_ReadAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: state
func (_m *InteractiveRendererPort) Render(state *ui.InteractiveViewState) error {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*ui.InteractiveViewState) error); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InteractiveRendererPort_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type InteractiveRendererPort_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - state *ui.InteractiveViewState
func (_e *InteractiveRendererPort_Expecter) Render(state interface{}) *InteractiveRendererPort_Render_Call {
	return &InteractiveRendererPort_Render_Call{Call: _e.mock.On("Render", state)}
}

func (_c *InteractiveRendererPort_Render_Call) Run(run func(state *ui.InteractiveViewState)) *InteractiveRendererPort_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ui.InteractiveViewState))
	})
	return _c
}

func (_c *InteractiveRendererPort_Render_Call) Return(_a0 error) *InteractiveRendererPort_Render_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InteractiveRendererPort_Render_Call) RunAndReturn(run func(*ui.InteractiveViewState) error) *InteractiveRendererPort_Render_Call {
	_c.Call.Return(run)
	return _c
}

// TakeOverScreen provides a mock function with given fields:
func (_m *InteractiveRendererPort) TakeOverScreen() {
	_m.Called()
}

// InteractiveRendererPort_TakeOverScreen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeOverScreen'
type InteractiveRendererPort_TakeOverScreen_Call struct {
	*mock.Call
}

// TakeOverScreen is a helper method to define mock.On call
func (_e *InteractiveRendererPort_Expecter) TakeOverScreen() *InteractiveRendererPort_TakeOverScreen_Call {
	return &InteractiveRendererPort_TakeOverScreen_Call{Call: _e.mock.On("TakeOverScreen")}
}

func (_c *InteractiveRendererPort_TakeOverScreen_Call) Run(run func()) *InteractiveRendererPort_TakeOverScreen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InteractiveRendererPort_TakeOverScreen_Call) Return() *InteractiveRendererPort_TakeOverScreen_Call {
	_c.Call.Return()
	return _c
}

func (_c *InteractiveRendererPort_TakeOverScreen_Call) RunAndReturn(run func()) *InteractiveRendererPort_TakeOverScreen_Call {
	_c.Call.Return(run)
	return _c
}

// NewInteractiveRendererPort creates a new instance of InteractiveRendererPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInteractiveRendererPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *InteractiveRendererPort {
	mock := &InteractiveRendererPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
