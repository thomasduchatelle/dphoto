// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"
)

// AlbumDatesAmendedObserverWithTimeline is an autogenerated mock type for the AlbumDatesAmendedObserverWithTimeline type
type AlbumDatesAmendedObserverWithTimeline struct {
	mock.Mock
}

type AlbumDatesAmendedObserverWithTimeline_Expecter struct {
	mock *mock.Mock
}

func (_m *AlbumDatesAmendedObserverWithTimeline) EXPECT() *AlbumDatesAmendedObserverWithTimeline_Expecter {
	return &AlbumDatesAmendedObserverWithTimeline_Expecter{mock: &_m.Mock}
}

// OnAlbumDatesAmendedWithTimeline provides a mock function with given fields: ctx, timeline, amendedAlbum
func (_m *AlbumDatesAmendedObserverWithTimeline) OnAlbumDatesAmendedWithTimeline(ctx context.Context, timeline *catalog.TimelineAggregate, amendedAlbum catalog.DatesUpdate) error {
	ret := _m.Called(ctx, timeline, amendedAlbum)

	if len(ret) == 0 {
		panic("no return value specified for OnAlbumDatesAmendedWithTimeline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.TimelineAggregate, catalog.DatesUpdate) error); ok {
		r0 = rf(ctx, timeline, amendedAlbum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAlbumDatesAmendedWithTimeline'
type AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call struct {
	*mock.Call
}

// OnAlbumDatesAmendedWithTimeline is a helper method to define mock.On call
//   - ctx context.Context
//   - timeline *catalog.TimelineAggregate
//   - amendedAlbum catalog.DatesUpdate
func (_e *AlbumDatesAmendedObserverWithTimeline_Expecter) OnAlbumDatesAmendedWithTimeline(ctx interface{}, timeline interface{}, amendedAlbum interface{}) *AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call {
	return &AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call{Call: _e.mock.On("OnAlbumDatesAmendedWithTimeline", ctx, timeline, amendedAlbum)}
}

func (_c *AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call) Run(run func(ctx context.Context, timeline *catalog.TimelineAggregate, amendedAlbum catalog.DatesUpdate)) *AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.TimelineAggregate), args[2].(catalog.DatesUpdate))
	})
	return _c
}

func (_c *AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call) Return(_a0 error) *AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call) RunAndReturn(run func(context.Context, *catalog.TimelineAggregate, catalog.DatesUpdate) error) *AlbumDatesAmendedObserverWithTimeline_OnAlbumDatesAmendedWithTimeline_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlbumDatesAmendedObserverWithTimeline creates a new instance of AlbumDatesAmendedObserverWithTimeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumDatesAmendedObserverWithTimeline(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumDatesAmendedObserverWithTimeline {
	mock := &AlbumDatesAmendedObserverWithTimeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
