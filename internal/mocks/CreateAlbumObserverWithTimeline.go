// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"
)

// CreateAlbumObserverWithTimeline is an autogenerated mock type for the CreateAlbumObserverWithTimeline type
type CreateAlbumObserverWithTimeline struct {
	mock.Mock
}

type CreateAlbumObserverWithTimeline_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateAlbumObserverWithTimeline) EXPECT() *CreateAlbumObserverWithTimeline_Expecter {
	return &CreateAlbumObserverWithTimeline_Expecter{mock: &_m.Mock}
}

// ObserveCreateAlbum provides a mock function with given fields: ctx, timeline, createdAlbum
func (_m *CreateAlbumObserverWithTimeline) ObserveCreateAlbum(ctx context.Context, timeline *catalog.TimelineAggregate, createdAlbum catalog.Album) error {
	ret := _m.Called(ctx, timeline, createdAlbum)

	if len(ret) == 0 {
		panic("no return value specified for ObserveCreateAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.TimelineAggregate, catalog.Album) error); ok {
		r0 = rf(ctx, timeline, createdAlbum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveCreateAlbum'
type CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call struct {
	*mock.Call
}

// ObserveCreateAlbum is a helper method to define mock.On call
//   - ctx context.Context
//   - timeline *catalog.TimelineAggregate
//   - createdAlbum catalog.Album
func (_e *CreateAlbumObserverWithTimeline_Expecter) ObserveCreateAlbum(ctx interface{}, timeline interface{}, createdAlbum interface{}) *CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call {
	return &CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call{Call: _e.mock.On("ObserveCreateAlbum", ctx, timeline, createdAlbum)}
}

func (_c *CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call) Run(run func(ctx context.Context, timeline *catalog.TimelineAggregate, createdAlbum catalog.Album)) *CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.TimelineAggregate), args[2].(catalog.Album))
	})
	return _c
}

func (_c *CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call) Return(_a0 error) *CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call) RunAndReturn(run func(context.Context, *catalog.TimelineAggregate, catalog.Album) error) *CreateAlbumObserverWithTimeline_ObserveCreateAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreateAlbumObserverWithTimeline creates a new instance of CreateAlbumObserverWithTimeline. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateAlbumObserverWithTimeline(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateAlbumObserverWithTimeline {
	mock := &CreateAlbumObserverWithTimeline{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
