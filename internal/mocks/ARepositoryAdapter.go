// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ARepositoryAdapter is an autogenerated mock type for the ARepositoryAdapter type
type ARepositoryAdapter struct {
	mock.Mock
}

type ARepositoryAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *ARepositoryAdapter) EXPECT() *ARepositoryAdapter_Expecter {
	return &ARepositoryAdapter_Expecter{mock: &_m.Mock}
}

// AddLocation provides a mock function with given fields: owner, id, key
func (_m *ARepositoryAdapter) AddLocation(owner string, id string, key string) error {
	ret := _m.Called(owner, id, key)

	if len(ret) == 0 {
		panic("no return value specified for AddLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(owner, id, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ARepositoryAdapter_AddLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLocation'
type ARepositoryAdapter_AddLocation_Call struct {
	*mock.Call
}

// AddLocation is a helper method to define mock.On call
//   - owner string
//   - id string
//   - key string
func (_e *ARepositoryAdapter_Expecter) AddLocation(owner interface{}, id interface{}, key interface{}) *ARepositoryAdapter_AddLocation_Call {
	return &ARepositoryAdapter_AddLocation_Call{Call: _e.mock.On("AddLocation", owner, id, key)}
}

func (_c *ARepositoryAdapter_AddLocation_Call) Run(run func(owner string, id string, key string)) *ARepositoryAdapter_AddLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ARepositoryAdapter_AddLocation_Call) Return(_a0 error) *ARepositoryAdapter_AddLocation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ARepositoryAdapter_AddLocation_Call) RunAndReturn(run func(string, string, string) error) *ARepositoryAdapter_AddLocation_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: owner, id
func (_m *ARepositoryAdapter) FindById(owner string, id string) (string, error) {
	ret := _m.Called(owner, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(owner, id)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(owner, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ARepositoryAdapter_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type ARepositoryAdapter_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - owner string
//   - id string
func (_e *ARepositoryAdapter_Expecter) FindById(owner interface{}, id interface{}) *ARepositoryAdapter_FindById_Call {
	return &ARepositoryAdapter_FindById_Call{Call: _e.mock.On("FindById", owner, id)}
}

func (_c *ARepositoryAdapter_FindById_Call) Run(run func(owner string, id string)) *ARepositoryAdapter_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ARepositoryAdapter_FindById_Call) Return(_a0 string, _a1 error) *ARepositoryAdapter_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ARepositoryAdapter_FindById_Call) RunAndReturn(run func(string, string) (string, error)) *ARepositoryAdapter_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function with given fields: owner, ids
func (_m *ARepositoryAdapter) FindByIds(owner string, ids []string) (map[string]string, error) {
	ret := _m.Called(owner, ids)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (map[string]string, error)); ok {
		return rf(owner, ids)
	}
	if rf, ok := ret.Get(0).(func(string, []string) map[string]string); ok {
		r0 = rf(owner, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(owner, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ARepositoryAdapter_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type ARepositoryAdapter_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - owner string
//   - ids []string
func (_e *ARepositoryAdapter_Expecter) FindByIds(owner interface{}, ids interface{}) *ARepositoryAdapter_FindByIds_Call {
	return &ARepositoryAdapter_FindByIds_Call{Call: _e.mock.On("FindByIds", owner, ids)}
}

func (_c *ARepositoryAdapter_FindByIds_Call) Run(run func(owner string, ids []string)) *ARepositoryAdapter_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *ARepositoryAdapter_FindByIds_Call) Return(_a0 map[string]string, _a1 error) *ARepositoryAdapter_FindByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ARepositoryAdapter_FindByIds_Call) RunAndReturn(run func(string, []string) (map[string]string, error)) *ARepositoryAdapter_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindIdsFromKeyPrefix provides a mock function with given fields: keyPrefix
func (_m *ARepositoryAdapter) FindIdsFromKeyPrefix(keyPrefix string) (map[string]string, error) {
	ret := _m.Called(keyPrefix)

	if len(ret) == 0 {
		panic("no return value specified for FindIdsFromKeyPrefix")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(keyPrefix)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(keyPrefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyPrefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ARepositoryAdapter_FindIdsFromKeyPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindIdsFromKeyPrefix'
type ARepositoryAdapter_FindIdsFromKeyPrefix_Call struct {
	*mock.Call
}

// FindIdsFromKeyPrefix is a helper method to define mock.On call
//   - keyPrefix string
func (_e *ARepositoryAdapter_Expecter) FindIdsFromKeyPrefix(keyPrefix interface{}) *ARepositoryAdapter_FindIdsFromKeyPrefix_Call {
	return &ARepositoryAdapter_FindIdsFromKeyPrefix_Call{Call: _e.mock.On("FindIdsFromKeyPrefix", keyPrefix)}
}

func (_c *ARepositoryAdapter_FindIdsFromKeyPrefix_Call) Run(run func(keyPrefix string)) *ARepositoryAdapter_FindIdsFromKeyPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ARepositoryAdapter_FindIdsFromKeyPrefix_Call) Return(_a0 map[string]string, _a1 error) *ARepositoryAdapter_FindIdsFromKeyPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ARepositoryAdapter_FindIdsFromKeyPrefix_Call) RunAndReturn(run func(string) (map[string]string, error)) *ARepositoryAdapter_FindIdsFromKeyPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocations provides a mock function with given fields: owner, locations
func (_m *ARepositoryAdapter) UpdateLocations(owner string, locations map[string]string) error {
	ret := _m.Called(owner, locations)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(owner, locations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ARepositoryAdapter_UpdateLocations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocations'
type ARepositoryAdapter_UpdateLocations_Call struct {
	*mock.Call
}

// UpdateLocations is a helper method to define mock.On call
//   - owner string
//   - locations map[string]string
func (_e *ARepositoryAdapter_Expecter) UpdateLocations(owner interface{}, locations interface{}) *ARepositoryAdapter_UpdateLocations_Call {
	return &ARepositoryAdapter_UpdateLocations_Call{Call: _e.mock.On("UpdateLocations", owner, locations)}
}

func (_c *ARepositoryAdapter_UpdateLocations_Call) Run(run func(owner string, locations map[string]string)) *ARepositoryAdapter_UpdateLocations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *ARepositoryAdapter_UpdateLocations_Call) Return(_a0 error) *ARepositoryAdapter_UpdateLocations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ARepositoryAdapter_UpdateLocations_Call) RunAndReturn(run func(string, map[string]string) error) *ARepositoryAdapter_UpdateLocations_Call {
	_c.Call.Return(run)
	return _c
}

// NewARepositoryAdapter creates a new instance of ARepositoryAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewARepositoryAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ARepositoryAdapter {
	mock := &ARepositoryAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
