// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryAdapter is an autogenerated mock type for the RepositoryAdapter type
type RepositoryAdapter struct {
	mock.Mock
}

// DeleteEmptyAlbum provides a mock function with given fields: ctx, id
func (_m *RepositoryAdapter) DeleteEmptyAlbum(ctx context.Context, id catalog.AlbumId) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmptyAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AlbumId) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAlbums provides a mock function with given fields: ctx, ids
func (_m *RepositoryAdapter) FindAlbums(ctx context.Context, ids ...catalog.AlbumId) ([]*catalog.Album, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindAlbums")
	}

	var r0 []*catalog.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...catalog.AlbumId) ([]*catalog.Album, error)); ok {
		return rf(ctx, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...catalog.AlbumId) []*catalog.Album); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...catalog.AlbumId) error); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAlbumsByOwner provides a mock function with given fields: ctx, owner
func (_m *RepositoryAdapter) FindAlbumsByOwner(ctx context.Context, owner catalog.Owner) ([]*catalog.Album, error) {
	ret := _m.Called(ctx, owner)

	if len(ret) == 0 {
		panic("no return value specified for FindAlbumsByOwner")
	}

	var r0 []*catalog.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner) ([]*catalog.Album, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner) []*catalog.Album); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Owner) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExistingSignatures provides a mock function with given fields: ctx, owner, signatures
func (_m *RepositoryAdapter) FindExistingSignatures(ctx context.Context, owner catalog.Owner, signatures []*catalog.MediaSignature) ([]*catalog.MediaSignature, error) {
	ret := _m.Called(ctx, owner, signatures)

	if len(ret) == 0 {
		panic("no return value specified for FindExistingSignatures")
	}

	var r0 []*catalog.MediaSignature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner, []*catalog.MediaSignature) ([]*catalog.MediaSignature, error)); ok {
		return rf(ctx, owner, signatures)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner, []*catalog.MediaSignature) []*catalog.MediaSignature); ok {
		r0 = rf(ctx, owner, signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.MediaSignature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Owner, []*catalog.MediaSignature) error); ok {
		r1 = rf(ctx, owner, signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMediaCurrentAlbum provides a mock function with given fields: ctx, owner, mediaId
func (_m *RepositoryAdapter) FindMediaCurrentAlbum(ctx context.Context, owner catalog.Owner, mediaId catalog.MediaId) (*catalog.AlbumId, error) {
	ret := _m.Called(ctx, owner, mediaId)

	if len(ret) == 0 {
		panic("no return value specified for FindMediaCurrentAlbum")
	}

	var r0 *catalog.AlbumId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner, catalog.MediaId) (*catalog.AlbumId, error)); ok {
		return rf(ctx, owner, mediaId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner, catalog.MediaId) *catalog.AlbumId); ok {
		r0 = rf(ctx, owner, mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AlbumId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Owner, catalog.MediaId) error); ok {
		r1 = rf(ctx, owner, mediaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMediaIds provides a mock function with given fields: ctx, request
func (_m *RepositoryAdapter) FindMediaIds(ctx context.Context, request *catalog.FindMediaRequest) ([]catalog.MediaId, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FindMediaIds")
	}

	var r0 []catalog.MediaId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.FindMediaRequest) ([]catalog.MediaId, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.FindMediaRequest) []catalog.MediaId); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.MediaId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalog.FindMediaRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMedias provides a mock function with given fields: ctx, request
func (_m *RepositoryAdapter) FindMedias(ctx context.Context, request *catalog.FindMediaRequest) ([]*catalog.MediaMeta, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FindMedias")
	}

	var r0 []*catalog.MediaMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.FindMediaRequest) ([]*catalog.MediaMeta, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.FindMediaRequest) []*catalog.MediaMeta); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.MediaMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalog.FindMediaRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAlbum provides a mock function with given fields: ctx, album
func (_m *RepositoryAdapter) InsertAlbum(ctx context.Context, album catalog.Album) error {
	ret := _m.Called(ctx, album)

	if len(ret) == 0 {
		panic("no return value specified for InsertAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Album) error); ok {
		r0 = rf(ctx, album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertMedias provides a mock function with given fields: ctx, owner, media
func (_m *RepositoryAdapter) InsertMedias(ctx context.Context, owner catalog.Owner, media []catalog.CreateMediaRequest) error {
	ret := _m.Called(ctx, owner, media)

	if len(ret) == 0 {
		panic("no return value specified for InsertMedias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner, []catalog.CreateMediaRequest) error); ok {
		r0 = rf(ctx, owner, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferMedias provides a mock function with given fields: ctx, owner, mediaIds, newFolderName
func (_m *RepositoryAdapter) TransferMedias(ctx context.Context, owner catalog.Owner, mediaIds []catalog.MediaId, newFolderName catalog.FolderName) error {
	ret := _m.Called(ctx, owner, mediaIds, newFolderName)

	if len(ret) == 0 {
		panic("no return value specified for TransferMedias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Owner, []catalog.MediaId, catalog.FolderName) error); ok {
		r0 = rf(ctx, owner, mediaIds, newFolderName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferMediasFromRecords provides a mock function with given fields: ctx, records
func (_m *RepositoryAdapter) TransferMediasFromRecords(ctx context.Context, records catalog.MediaTransferRecords) (catalog.TransferredMedias, error) {
	ret := _m.Called(ctx, records)

	if len(ret) == 0 {
		panic("no return value specified for TransferMediasFromRecords")
	}

	var r0 catalog.TransferredMedias
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.MediaTransferRecords) (catalog.TransferredMedias, error)); ok {
		return rf(ctx, records)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.MediaTransferRecords) catalog.TransferredMedias); ok {
		r0 = rf(ctx, records)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(catalog.TransferredMedias)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.MediaTransferRecords) error); ok {
		r1 = rf(ctx, records)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlbum provides a mock function with given fields: ctx, album
func (_m *RepositoryAdapter) UpdateAlbum(ctx context.Context, album catalog.Album) error {
	ret := _m.Called(ctx, album)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Album) error); ok {
		r0 = rf(ctx, album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryAdapter creates a new instance of RepositoryAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryAdapter {
	mock := &RepositoryAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
