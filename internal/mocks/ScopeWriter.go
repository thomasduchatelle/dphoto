// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	aclcore "github.com/thomasduchatelle/dphoto/pkg/acl/aclcore"
)

// ScopeWriter is an autogenerated mock type for the ScopeWriter type
type ScopeWriter struct {
	mock.Mock
}

type ScopeWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *ScopeWriter) EXPECT() *ScopeWriter_Expecter {
	return &ScopeWriter_Expecter{mock: &_m.Mock}
}

// DeleteScopes provides a mock function with given fields: id
func (_m *ScopeWriter) DeleteScopes(id ...aclcore.ScopeId) error {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScopes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...aclcore.ScopeId) error); ok {
		r0 = rf(id...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScopeWriter_DeleteScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScopes'
type ScopeWriter_DeleteScopes_Call struct {
	*mock.Call
}

// DeleteScopes is a helper method to define mock.On call
//   - id ...aclcore.ScopeId
func (_e *ScopeWriter_Expecter) DeleteScopes(id ...interface{}) *ScopeWriter_DeleteScopes_Call {
	return &ScopeWriter_DeleteScopes_Call{Call: _e.mock.On("DeleteScopes",
		append([]interface{}{}, id...)...)}
}

func (_c *ScopeWriter_DeleteScopes_Call) Run(run func(id ...aclcore.ScopeId)) *ScopeWriter_DeleteScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]aclcore.ScopeId, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(aclcore.ScopeId)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ScopeWriter_DeleteScopes_Call) Return(_a0 error) *ScopeWriter_DeleteScopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScopeWriter_DeleteScopes_Call) RunAndReturn(run func(...aclcore.ScopeId) error) *ScopeWriter_DeleteScopes_Call {
	_c.Call.Return(run)
	return _c
}

// SaveIfNewScope provides a mock function with given fields: scope
func (_m *ScopeWriter) SaveIfNewScope(scope aclcore.Scope) error {
	ret := _m.Called(scope)

	if len(ret) == 0 {
		panic("no return value specified for SaveIfNewScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(aclcore.Scope) error); ok {
		r0 = rf(scope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScopeWriter_SaveIfNewScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveIfNewScope'
type ScopeWriter_SaveIfNewScope_Call struct {
	*mock.Call
}

// SaveIfNewScope is a helper method to define mock.On call
//   - scope aclcore.Scope
func (_e *ScopeWriter_Expecter) SaveIfNewScope(scope interface{}) *ScopeWriter_SaveIfNewScope_Call {
	return &ScopeWriter_SaveIfNewScope_Call{Call: _e.mock.On("SaveIfNewScope", scope)}
}

func (_c *ScopeWriter_SaveIfNewScope_Call) Run(run func(scope aclcore.Scope)) *ScopeWriter_SaveIfNewScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(aclcore.Scope))
	})
	return _c
}

func (_c *ScopeWriter_SaveIfNewScope_Call) Return(_a0 error) *ScopeWriter_SaveIfNewScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScopeWriter_SaveIfNewScope_Call) RunAndReturn(run func(aclcore.Scope) error) *ScopeWriter_SaveIfNewScope_Call {
	_c.Call.Return(run)
	return _c
}

// NewScopeWriter creates a new instance of ScopeWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScopeWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScopeWriter {
	mock := &ScopeWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
