// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	ui "github.com/thomasduchatelle/dphoto/cmd/dphoto/cmd/ui"
)

// ExistingRecordRepositoryPort is an autogenerated mock type for the ExistingRecordRepositoryPort type
type ExistingRecordRepositoryPort struct {
	mock.Mock
}

type ExistingRecordRepositoryPort_Expecter struct {
	mock *mock.Mock
}

func (_m *ExistingRecordRepositoryPort) EXPECT() *ExistingRecordRepositoryPort_Expecter {
	return &ExistingRecordRepositoryPort_Expecter{mock: &_m.Mock}
}

// FindExistingRecords provides a mock function with given fields:
func (_m *ExistingRecordRepositoryPort) FindExistingRecords() ([]*ui.ExistingRecord, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindExistingRecords")
	}

	var r0 []*ui.ExistingRecord
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*ui.ExistingRecord, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*ui.ExistingRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ui.ExistingRecord)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistingRecordRepositoryPort_FindExistingRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindExistingRecords'
type ExistingRecordRepositoryPort_FindExistingRecords_Call struct {
	*mock.Call
}

// FindExistingRecords is a helper method to define mock.On call
func (_e *ExistingRecordRepositoryPort_Expecter) FindExistingRecords() *ExistingRecordRepositoryPort_FindExistingRecords_Call {
	return &ExistingRecordRepositoryPort_FindExistingRecords_Call{Call: _e.mock.On("FindExistingRecords")}
}

func (_c *ExistingRecordRepositoryPort_FindExistingRecords_Call) Run(run func()) *ExistingRecordRepositoryPort_FindExistingRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExistingRecordRepositoryPort_FindExistingRecords_Call) Return(_a0 []*ui.ExistingRecord, _a1 error) *ExistingRecordRepositoryPort_FindExistingRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExistingRecordRepositoryPort_FindExistingRecords_Call) RunAndReturn(run func() ([]*ui.ExistingRecord, error)) *ExistingRecordRepositoryPort_FindExistingRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewExistingRecordRepositoryPort creates a new instance of ExistingRecordRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExistingRecordRepositoryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExistingRecordRepositoryPort {
	mock := &ExistingRecordRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
