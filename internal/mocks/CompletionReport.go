// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/pkg/backup"
)

// CompletionReport is an autogenerated mock type for the CompletionReport type
type CompletionReport struct {
	mock.Mock
}

type CompletionReport_Expecter struct {
	mock *mock.Mock
}

func (_m *CompletionReport) EXPECT() *CompletionReport_Expecter {
	return &CompletionReport_Expecter{mock: &_m.Mock}
}

// CountPerAlbum provides a mock function with given fields:
func (_m *CompletionReport) CountPerAlbum() map[string]*backup.TypeCounter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountPerAlbum")
	}

	var r0 map[string]*backup.TypeCounter
	if rf, ok := ret.Get(0).(func() map[string]*backup.TypeCounter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*backup.TypeCounter)
		}
	}

	return r0
}

// CompletionReport_CountPerAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountPerAlbum'
type CompletionReport_CountPerAlbum_Call struct {
	*mock.Call
}

// CountPerAlbum is a helper method to define mock.On call
func (_e *CompletionReport_Expecter) CountPerAlbum() *CompletionReport_CountPerAlbum_Call {
	return &CompletionReport_CountPerAlbum_Call{Call: _e.mock.On("CountPerAlbum")}
}

func (_c *CompletionReport_CountPerAlbum_Call) Run(run func()) *CompletionReport_CountPerAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CompletionReport_CountPerAlbum_Call) Return(_a0 map[string]*backup.TypeCounter) *CompletionReport_CountPerAlbum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CompletionReport_CountPerAlbum_Call) RunAndReturn(run func() map[string]*backup.TypeCounter) *CompletionReport_CountPerAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlbums provides a mock function with given fields:
func (_m *CompletionReport) NewAlbums() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewAlbums")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// CompletionReport_NewAlbums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAlbums'
type CompletionReport_NewAlbums_Call struct {
	*mock.Call
}

// NewAlbums is a helper method to define mock.On call
func (_e *CompletionReport_Expecter) NewAlbums() *CompletionReport_NewAlbums_Call {
	return &CompletionReport_NewAlbums_Call{Call: _e.mock.On("NewAlbums")}
}

func (_c *CompletionReport_NewAlbums_Call) Run(run func()) *CompletionReport_NewAlbums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CompletionReport_NewAlbums_Call) Return(_a0 []string) *CompletionReport_NewAlbums_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CompletionReport_NewAlbums_Call) RunAndReturn(run func() []string) *CompletionReport_NewAlbums_Call {
	_c.Call.Return(run)
	return _c
}

// Skipped provides a mock function with given fields:
func (_m *CompletionReport) Skipped() backup.MediaCounter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Skipped")
	}

	var r0 backup.MediaCounter
	if rf, ok := ret.Get(0).(func() backup.MediaCounter); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backup.MediaCounter)
	}

	return r0
}

// CompletionReport_Skipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Skipped'
type CompletionReport_Skipped_Call struct {
	*mock.Call
}

// Skipped is a helper method to define mock.On call
func (_e *CompletionReport_Expecter) Skipped() *CompletionReport_Skipped_Call {
	return &CompletionReport_Skipped_Call{Call: _e.mock.On("Skipped")}
}

func (_c *CompletionReport_Skipped_Call) Run(run func()) *CompletionReport_Skipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CompletionReport_Skipped_Call) Return(_a0 backup.MediaCounter) *CompletionReport_Skipped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CompletionReport_Skipped_Call) RunAndReturn(run func() backup.MediaCounter) *CompletionReport_Skipped_Call {
	_c.Call.Return(run)
	return _c
}

// NewCompletionReport creates a new instance of CompletionReport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompletionReport(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompletionReport {
	mock := &CompletionReport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
