// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StatefulAlbumReferencer is an autogenerated mock type for the StatefulAlbumReferencer type
type StatefulAlbumReferencer struct {
	mock.Mock
}

type StatefulAlbumReferencer_Expecter struct {
	mock *mock.Mock
}

func (_m *StatefulAlbumReferencer) EXPECT() *StatefulAlbumReferencer_Expecter {
	return &StatefulAlbumReferencer_Expecter{mock: &_m.Mock}
}

// FindReference provides a mock function with given fields: ctx, mediaTime
func (_m *StatefulAlbumReferencer) FindReference(ctx context.Context, mediaTime time.Time) (catalog.AlbumReference, error) {
	ret := _m.Called(ctx, mediaTime)

	if len(ret) == 0 {
		panic("no return value specified for FindReference")
	}

	var r0 catalog.AlbumReference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (catalog.AlbumReference, error)); ok {
		return rf(ctx, mediaTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) catalog.AlbumReference); ok {
		r0 = rf(ctx, mediaTime)
	} else {
		r0 = ret.Get(0).(catalog.AlbumReference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, mediaTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatefulAlbumReferencer_FindReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindReference'
type StatefulAlbumReferencer_FindReference_Call struct {
	*mock.Call
}

// FindReference is a helper method to define mock.On call
//   - ctx context.Context
//   - mediaTime time.Time
func (_e *StatefulAlbumReferencer_Expecter) FindReference(ctx interface{}, mediaTime interface{}) *StatefulAlbumReferencer_FindReference_Call {
	return &StatefulAlbumReferencer_FindReference_Call{Call: _e.mock.On("FindReference", ctx, mediaTime)}
}

func (_c *StatefulAlbumReferencer_FindReference_Call) Run(run func(ctx context.Context, mediaTime time.Time)) *StatefulAlbumReferencer_FindReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *StatefulAlbumReferencer_FindReference_Call) Return(_a0 catalog.AlbumReference, _a1 error) *StatefulAlbumReferencer_FindReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatefulAlbumReferencer_FindReference_Call) RunAndReturn(run func(context.Context, time.Time) (catalog.AlbumReference, error)) *StatefulAlbumReferencer_FindReference_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatefulAlbumReferencer creates a new instance of StatefulAlbumReferencer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatefulAlbumReferencer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatefulAlbumReferencer {
	mock := &StatefulAlbumReferencer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
