// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	aws "github.com/aws/aws-sdk-go-v2/aws"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ConfigFactory is an autogenerated mock type for the ConfigFactory type
type ConfigFactory struct {
	mock.Mock
}

// NewConfig provides a mock function with given fields: ctx
func (_m *ConfigFactory) NewConfig(ctx context.Context) (aws.Config, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewConfig")
	}

	var r0 aws.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (aws.Config, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) aws.Config); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(aws.Config)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConfigFactory creates a new instance of ConfigFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigFactory {
	mock := &ConfigFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
