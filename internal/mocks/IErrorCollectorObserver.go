// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backup "github.com/thomasduchatelle/dphoto/pkg/backup"

	mock "github.com/stretchr/testify/mock"
)

// IErrorCollectorObserver is an autogenerated mock type for the IErrorCollectorObserver type
type IErrorCollectorObserver struct {
	mock.Mock
}

type IErrorCollectorObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *IErrorCollectorObserver) EXPECT() *IErrorCollectorObserver_Expecter {
	return &IErrorCollectorObserver_Expecter{mock: &_m.Mock}
}

// Errors provides a mock function with given fields:
func (_m *IErrorCollectorObserver) Errors() []error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 []error
	if rf, ok := ret.Get(0).(func() []error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// IErrorCollectorObserver_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type IErrorCollectorObserver_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *IErrorCollectorObserver_Expecter) Errors() *IErrorCollectorObserver_Errors_Call {
	return &IErrorCollectorObserver_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *IErrorCollectorObserver_Errors_Call) Run(run func()) *IErrorCollectorObserver_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IErrorCollectorObserver_Errors_Call) Return(_a0 []error) *IErrorCollectorObserver_Errors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IErrorCollectorObserver_Errors_Call) RunAndReturn(run func() []error) *IErrorCollectorObserver_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// OnRejectedMedia provides a mock function with given fields: ctx, found, cause
func (_m *IErrorCollectorObserver) OnRejectedMedia(ctx context.Context, found backup.FoundMedia, cause error) error {
	_m.Called(ctx, found, cause)
	return nil
}

// IErrorCollectorObserver_OnRejectedMedia_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnRejectedMedia'
type IErrorCollectorObserver_OnRejectedMedia_Call struct {
	*mock.Call
}

// OnRejectedMedia is a helper method to define mock.On call
//   - ctx context.Context
//   - found backup.FoundMedia
//   - cause error
func (_e *IErrorCollectorObserver_Expecter) OnRejectedMedia(ctx interface{}, found interface{}, cause interface{}) *IErrorCollectorObserver_OnRejectedMedia_Call {
	return &IErrorCollectorObserver_OnRejectedMedia_Call{Call: _e.mock.On("OnRejectedMedia", ctx, found, cause)}
}

func (_c *IErrorCollectorObserver_OnRejectedMedia_Call) Run(run func(ctx context.Context, found backup.FoundMedia, cause error)) *IErrorCollectorObserver_OnRejectedMedia_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(backup.FoundMedia), args[2].(error))
	})
	return _c
}

func (_c *IErrorCollectorObserver_OnRejectedMedia_Call) Return() *IErrorCollectorObserver_OnRejectedMedia_Call {
	_c.Call.Return()
	return _c
}

func (_c *IErrorCollectorObserver_OnRejectedMedia_Call) RunAndReturn(run func(context.Context, backup.FoundMedia, error)) *IErrorCollectorObserver_OnRejectedMedia_Call {
	_c.Call.Return(run)
	return _c
}

// appendError provides a mock function with given fields: err
func (_m *IErrorCollectorObserver) appendError(err error) {
	_m.Called(err)
}

// IErrorCollectorObserver_appendError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'appendError'
type IErrorCollectorObserver_appendError_Call struct {
	*mock.Call
}

// appendError is a helper method to define mock.On call
//   - err error
func (_e *IErrorCollectorObserver_Expecter) appendError(err interface{}) *IErrorCollectorObserver_appendError_Call {
	return &IErrorCollectorObserver_appendError_Call{Call: _e.mock.On("appendError", err)}
}

func (_c *IErrorCollectorObserver_appendError_Call) Run(run func(err error)) *IErrorCollectorObserver_appendError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *IErrorCollectorObserver_appendError_Call) Return() *IErrorCollectorObserver_appendError_Call {
	_c.Call.Return()
	return _c
}

func (_c *IErrorCollectorObserver_appendError_Call) RunAndReturn(run func(error)) *IErrorCollectorObserver_appendError_Call {
	_c.Call.Return(run)
	return _c
}

// hasAnyErrors provides a mock function with given fields:
func (_m *IErrorCollectorObserver) hasAnyErrors() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for hasAnyErrors")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IErrorCollectorObserver_hasAnyErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'hasAnyErrors'
type IErrorCollectorObserver_hasAnyErrors_Call struct {
	*mock.Call
}

// hasAnyErrors is a helper method to define mock.On call
func (_e *IErrorCollectorObserver_Expecter) hasAnyErrors() *IErrorCollectorObserver_hasAnyErrors_Call {
	return &IErrorCollectorObserver_hasAnyErrors_Call{Call: _e.mock.On("hasAnyErrors")}
}

func (_c *IErrorCollectorObserver_hasAnyErrors_Call) Run(run func()) *IErrorCollectorObserver_hasAnyErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IErrorCollectorObserver_hasAnyErrors_Call) Return(_a0 int) *IErrorCollectorObserver_hasAnyErrors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IErrorCollectorObserver_hasAnyErrors_Call) RunAndReturn(run func() int) *IErrorCollectorObserver_hasAnyErrors_Call {
	_c.Call.Return(run)
	return _c
}

// NewIErrorCollectorObserver creates a new instance of IErrorCollectorObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIErrorCollectorObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *IErrorCollectorObserver {
	mock := &IErrorCollectorObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
