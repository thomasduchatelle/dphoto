// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"
)

// DeleteAlbumObserver is an autogenerated mock type for the DeleteAlbumObserver type
type DeleteAlbumObserver struct {
	mock.Mock
}

type DeleteAlbumObserver_Expecter struct {
	mock *mock.Mock
}

func (_m *DeleteAlbumObserver) EXPECT() *DeleteAlbumObserver_Expecter {
	return &DeleteAlbumObserver_Expecter{mock: &_m.Mock}
}

// OnDeleteAlbum provides a mock function with given fields: ctx, deletedAlbum, transfers
func (_m *DeleteAlbumObserver) OnDeleteAlbum(ctx context.Context, deletedAlbum catalog.AlbumId, transfers catalog.MediaTransferRecords) error {
	ret := _m.Called(ctx, deletedAlbum, transfers)

	if len(ret) == 0 {
		panic("no return value specified for OnDeleteAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.AlbumId, catalog.MediaTransferRecords) error); ok {
		r0 = rf(ctx, deletedAlbum, transfers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAlbumObserver_OnDeleteAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDeleteAlbum'
type DeleteAlbumObserver_OnDeleteAlbum_Call struct {
	*mock.Call
}

// OnDeleteAlbum is a helper method to define mock.On call
//   - ctx context.Context
//   - deletedAlbum catalog.AlbumId
//   - transfers catalog.MediaTransferRecords
func (_e *DeleteAlbumObserver_Expecter) OnDeleteAlbum(ctx interface{}, deletedAlbum interface{}, transfers interface{}) *DeleteAlbumObserver_OnDeleteAlbum_Call {
	return &DeleteAlbumObserver_OnDeleteAlbum_Call{Call: _e.mock.On("OnDeleteAlbum", ctx, deletedAlbum, transfers)}
}

func (_c *DeleteAlbumObserver_OnDeleteAlbum_Call) Run(run func(ctx context.Context, deletedAlbum catalog.AlbumId, transfers catalog.MediaTransferRecords)) *DeleteAlbumObserver_OnDeleteAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.AlbumId), args[2].(catalog.MediaTransferRecords))
	})
	return _c
}

func (_c *DeleteAlbumObserver_OnDeleteAlbum_Call) Return(_a0 error) *DeleteAlbumObserver_OnDeleteAlbum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeleteAlbumObserver_OnDeleteAlbum_Call) RunAndReturn(run func(context.Context, catalog.AlbumId, catalog.MediaTransferRecords) error) *DeleteAlbumObserver_OnDeleteAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeleteAlbumObserver creates a new instance of DeleteAlbumObserver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeleteAlbumObserver(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeleteAlbumObserver {
	mock := &DeleteAlbumObserver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
