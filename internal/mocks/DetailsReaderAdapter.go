// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	io "io"

	backup "github.com/thomasduchatelle/dphoto/pkg/backup"

	mock "github.com/stretchr/testify/mock"
)

// DetailsReaderAdapter is an autogenerated mock type for the DetailsReaderAdapter type
type DetailsReaderAdapter struct {
	mock.Mock
}

// ReadDetails provides a mock function with given fields: reader, options
func (_m *DetailsReaderAdapter) ReadDetails(reader io.Reader, options backup.DetailsReaderOptions) (*backup.MediaDetails, error) {
	ret := _m.Called(reader, options)

	var r0 *backup.MediaDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, backup.DetailsReaderOptions) (*backup.MediaDetails, error)); ok {
		return rf(reader, options)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, backup.DetailsReaderOptions) *backup.MediaDetails); ok {
		r0 = rf(reader, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.MediaDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, backup.DetailsReaderOptions) error); ok {
		r1 = rf(reader, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Supports provides a mock function with given fields: media, mediaType
func (_m *DetailsReaderAdapter) Supports(media backup.FoundMedia, mediaType backup.MediaType) bool {
	ret := _m.Called(media, mediaType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(backup.FoundMedia, backup.MediaType) bool); ok {
		r0 = rf(media, mediaType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewDetailsReaderAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewDetailsReaderAdapter creates a new instance of DetailsReaderAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDetailsReaderAdapter(t mockConstructorTestingTNewDetailsReaderAdapter) *DetailsReaderAdapter {
	mock := &DetailsReaderAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
