// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	io "io"

	backup "github.com/thomasduchatelle/dphoto/pkg/backup"

	mock "github.com/stretchr/testify/mock"
)

// DetailsReaderAdapter is an autogenerated mock type for the DetailsReaderAdapter type
type DetailsReaderAdapter struct {
	mock.Mock
}

type DetailsReaderAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *DetailsReaderAdapter) EXPECT() *DetailsReaderAdapter_Expecter {
	return &DetailsReaderAdapter_Expecter{mock: &_m.Mock}
}

// ReadDetails provides a mock function with given fields: reader, options
func (_m *DetailsReaderAdapter) ReadDetails(reader io.Reader, options backup.DetailsReaderOptions) (*backup.MediaDetails, error) {
	ret := _m.Called(reader, options)

	if len(ret) == 0 {
		panic("no return value specified for ReadDetails")
	}

	var r0 *backup.MediaDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, backup.DetailsReaderOptions) (*backup.MediaDetails, error)); ok {
		return rf(reader, options)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, backup.DetailsReaderOptions) *backup.MediaDetails); ok {
		r0 = rf(reader, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.MediaDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, backup.DetailsReaderOptions) error); ok {
		r1 = rf(reader, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailsReaderAdapter_ReadDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDetails'
type DetailsReaderAdapter_ReadDetails_Call struct {
	*mock.Call
}

// ReadDetails is a helper method to define mock.On call
//   - reader io.Reader
//   - options backup.DetailsReaderOptions
func (_e *DetailsReaderAdapter_Expecter) ReadDetails(reader interface{}, options interface{}) *DetailsReaderAdapter_ReadDetails_Call {
	return &DetailsReaderAdapter_ReadDetails_Call{Call: _e.mock.On("ReadDetails", reader, options)}
}

func (_c *DetailsReaderAdapter_ReadDetails_Call) Run(run func(reader io.Reader, options backup.DetailsReaderOptions)) *DetailsReaderAdapter_ReadDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].(backup.DetailsReaderOptions))
	})
	return _c
}

func (_c *DetailsReaderAdapter_ReadDetails_Call) Return(_a0 *backup.MediaDetails, _a1 error) *DetailsReaderAdapter_ReadDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DetailsReaderAdapter_ReadDetails_Call) RunAndReturn(run func(io.Reader, backup.DetailsReaderOptions) (*backup.MediaDetails, error)) *DetailsReaderAdapter_ReadDetails_Call {
	_c.Call.Return(run)
	return _c
}

// Supports provides a mock function with given fields: media, mediaType
func (_m *DetailsReaderAdapter) Supports(media backup.FoundMedia, mediaType backup.MediaType) bool {
	ret := _m.Called(media, mediaType)

	if len(ret) == 0 {
		panic("no return value specified for Supports")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(backup.FoundMedia, backup.MediaType) bool); ok {
		r0 = rf(media, mediaType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DetailsReaderAdapter_Supports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Supports'
type DetailsReaderAdapter_Supports_Call struct {
	*mock.Call
}

// Supports is a helper method to define mock.On call
//   - media backup.FoundMedia
//   - mediaType backup.MediaType
func (_e *DetailsReaderAdapter_Expecter) Supports(media interface{}, mediaType interface{}) *DetailsReaderAdapter_Supports_Call {
	return &DetailsReaderAdapter_Supports_Call{Call: _e.mock.On("Supports", media, mediaType)}
}

func (_c *DetailsReaderAdapter_Supports_Call) Run(run func(media backup.FoundMedia, mediaType backup.MediaType)) *DetailsReaderAdapter_Supports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(backup.FoundMedia), args[1].(backup.MediaType))
	})
	return _c
}

func (_c *DetailsReaderAdapter_Supports_Call) Return(_a0 bool) *DetailsReaderAdapter_Supports_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DetailsReaderAdapter_Supports_Call) RunAndReturn(run func(backup.FoundMedia, backup.MediaType) bool) *DetailsReaderAdapter_Supports_Call {
	_c.Call.Return(run)
	return _c
}

// NewDetailsReaderAdapter creates a new instance of DetailsReaderAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDetailsReaderAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *DetailsReaderAdapter {
	mock := &DetailsReaderAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
