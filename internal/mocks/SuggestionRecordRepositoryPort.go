// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	ui "github.com/thomasduchatelle/dphoto/cmd/dphoto/cmd/ui"
)

// SuggestionRecordRepositoryPort is an autogenerated mock type for the SuggestionRecordRepositoryPort type
type SuggestionRecordRepositoryPort struct {
	mock.Mock
}

type SuggestionRecordRepositoryPort_Expecter struct {
	mock *mock.Mock
}

func (_m *SuggestionRecordRepositoryPort) EXPECT() *SuggestionRecordRepositoryPort_Expecter {
	return &SuggestionRecordRepositoryPort_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields:
func (_m *SuggestionRecordRepositoryPort) Count() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SuggestionRecordRepositoryPort_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type SuggestionRecordRepositoryPort_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *SuggestionRecordRepositoryPort_Expecter) Count() *SuggestionRecordRepositoryPort_Count_Call {
	return &SuggestionRecordRepositoryPort_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *SuggestionRecordRepositoryPort_Count_Call) Run(run func()) *SuggestionRecordRepositoryPort_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SuggestionRecordRepositoryPort_Count_Call) Return(_a0 int) *SuggestionRecordRepositoryPort_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SuggestionRecordRepositoryPort_Count_Call) RunAndReturn(run func() int) *SuggestionRecordRepositoryPort_Count_Call {
	_c.Call.Return(run)
	return _c
}

// FindSuggestionRecords provides a mock function with given fields:
func (_m *SuggestionRecordRepositoryPort) FindSuggestionRecords() []*ui.SuggestionRecord {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindSuggestionRecords")
	}

	var r0 []*ui.SuggestionRecord
	if rf, ok := ret.Get(0).(func() []*ui.SuggestionRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ui.SuggestionRecord)
		}
	}

	return r0
}

// SuggestionRecordRepositoryPort_FindSuggestionRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSuggestionRecords'
type SuggestionRecordRepositoryPort_FindSuggestionRecords_Call struct {
	*mock.Call
}

// FindSuggestionRecords is a helper method to define mock.On call
func (_e *SuggestionRecordRepositoryPort_Expecter) FindSuggestionRecords() *SuggestionRecordRepositoryPort_FindSuggestionRecords_Call {
	return &SuggestionRecordRepositoryPort_FindSuggestionRecords_Call{Call: _e.mock.On("FindSuggestionRecords")}
}

func (_c *SuggestionRecordRepositoryPort_FindSuggestionRecords_Call) Run(run func()) *SuggestionRecordRepositoryPort_FindSuggestionRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SuggestionRecordRepositoryPort_FindSuggestionRecords_Call) Return(_a0 []*ui.SuggestionRecord) *SuggestionRecordRepositoryPort_FindSuggestionRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SuggestionRecordRepositoryPort_FindSuggestionRecords_Call) RunAndReturn(run func() []*ui.SuggestionRecord) *SuggestionRecordRepositoryPort_FindSuggestionRecords_Call {
	_c.Call.Return(run)
	return _c
}

// Rejects provides a mock function with given fields:
func (_m *SuggestionRecordRepositoryPort) Rejects() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rejects")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SuggestionRecordRepositoryPort_Rejects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rejects'
type SuggestionRecordRepositoryPort_Rejects_Call struct {
	*mock.Call
}

// Rejects is a helper method to define mock.On call
func (_e *SuggestionRecordRepositoryPort_Expecter) Rejects() *SuggestionRecordRepositoryPort_Rejects_Call {
	return &SuggestionRecordRepositoryPort_Rejects_Call{Call: _e.mock.On("Rejects")}
}

func (_c *SuggestionRecordRepositoryPort_Rejects_Call) Run(run func()) *SuggestionRecordRepositoryPort_Rejects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SuggestionRecordRepositoryPort_Rejects_Call) Return(_a0 int) *SuggestionRecordRepositoryPort_Rejects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SuggestionRecordRepositoryPort_Rejects_Call) RunAndReturn(run func() int) *SuggestionRecordRepositoryPort_Rejects_Call {
	_c.Call.Return(run)
	return _c
}

// NewSuggestionRecordRepositoryPort creates a new instance of SuggestionRecordRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSuggestionRecordRepositoryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *SuggestionRecordRepositoryPort {
	mock := &SuggestionRecordRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
