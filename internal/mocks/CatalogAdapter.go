// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/pkg/backup"
)

// CatalogAdapter is an autogenerated mock type for the CatalogAdapter type
type CatalogAdapter struct {
	mock.Mock
}

type CatalogAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *CatalogAdapter) EXPECT() *CatalogAdapter_Expecter {
	return &CatalogAdapter_Expecter{mock: &_m.Mock}
}

// IndexMedias provides a mock function with given fields: owner, requests
func (_m *CatalogAdapter) IndexMedias(owner string, requests []*backup.CatalogMediaRequest) error {
	ret := _m.Called(owner, requests)

	if len(ret) == 0 {
		panic("no return value specified for IndexMedias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*backup.CatalogMediaRequest) error); ok {
		r0 = rf(owner, requests)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CatalogAdapter_IndexMedias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexMedias'
type CatalogAdapter_IndexMedias_Call struct {
	*mock.Call
}

// IndexMedias is a helper method to define mock.On call
//   - owner string
//   - requests []*backup.CatalogMediaRequest
func (_e *CatalogAdapter_Expecter) IndexMedias(owner interface{}, requests interface{}) *CatalogAdapter_IndexMedias_Call {
	return &CatalogAdapter_IndexMedias_Call{Call: _e.mock.On("IndexMedias", owner, requests)}
}

func (_c *CatalogAdapter_IndexMedias_Call) Run(run func(owner string, requests []*backup.CatalogMediaRequest)) *CatalogAdapter_IndexMedias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*backup.CatalogMediaRequest))
	})
	return _c
}

func (_c *CatalogAdapter_IndexMedias_Call) Return(_a0 error) *CatalogAdapter_IndexMedias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogAdapter_IndexMedias_Call) RunAndReturn(run func(string, []*backup.CatalogMediaRequest) error) *CatalogAdapter_IndexMedias_Call {
	_c.Call.Return(run)
	return _c
}

// NewCatalogAdapter creates a new instance of CatalogAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *CatalogAdapter {
	mock := &CatalogAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
