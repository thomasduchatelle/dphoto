// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ResizerAdapter is an autogenerated mock type for the ResizerAdapter type
type ResizerAdapter struct {
	mock.Mock
}

type ResizerAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *ResizerAdapter) EXPECT() *ResizerAdapter_Expecter {
	return &ResizerAdapter_Expecter{mock: &_m.Mock}
}

// ResizeImage provides a mock function with given fields: reader, width, fast
func (_m *ResizerAdapter) ResizeImage(reader io.Reader, width int, fast bool) ([]byte, string, error) {
	ret := _m.Called(reader, width, fast)

	if len(ret) == 0 {
		panic("no return value specified for ResizeImage")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(io.Reader, int, bool) ([]byte, string, error)); ok {
		return rf(reader, width, fast)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, int, bool) []byte); ok {
		r0 = rf(reader, width, fast)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, int, bool) string); ok {
		r1 = rf(reader, width, fast)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(io.Reader, int, bool) error); ok {
		r2 = rf(reader, width, fast)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResizerAdapter_ResizeImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResizeImage'
type ResizerAdapter_ResizeImage_Call struct {
	*mock.Call
}

// ResizeImage is a helper method to define mock.On call
//   - reader io.Reader
//   - width int
//   - fast bool
func (_e *ResizerAdapter_Expecter) ResizeImage(reader interface{}, width interface{}, fast interface{}) *ResizerAdapter_ResizeImage_Call {
	return &ResizerAdapter_ResizeImage_Call{Call: _e.mock.On("ResizeImage", reader, width, fast)}
}

func (_c *ResizerAdapter_ResizeImage_Call) Run(run func(reader io.Reader, width int, fast bool)) *ResizerAdapter_ResizeImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].(int), args[2].(bool))
	})
	return _c
}

func (_c *ResizerAdapter_ResizeImage_Call) Return(_a0 []byte, _a1 string, _a2 error) *ResizerAdapter_ResizeImage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResizerAdapter_ResizeImage_Call) RunAndReturn(run func(io.Reader, int, bool) ([]byte, string, error)) *ResizerAdapter_ResizeImage_Call {
	_c.Call.Return(run)
	return _c
}

// ResizeImageAtDifferentWidths provides a mock function with given fields: reader, width
func (_m *ResizerAdapter) ResizeImageAtDifferentWidths(reader io.Reader, width []int) (map[int][]byte, string, error) {
	ret := _m.Called(reader, width)

	if len(ret) == 0 {
		panic("no return value specified for ResizeImageAtDifferentWidths")
	}

	var r0 map[int][]byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(io.Reader, []int) (map[int][]byte, string, error)); ok {
		return rf(reader, width)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, []int) map[int][]byte); ok {
		r0 = rf(reader, width)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader, []int) string); ok {
		r1 = rf(reader, width)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(io.Reader, []int) error); ok {
		r2 = rf(reader, width)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResizerAdapter_ResizeImageAtDifferentWidths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResizeImageAtDifferentWidths'
type ResizerAdapter_ResizeImageAtDifferentWidths_Call struct {
	*mock.Call
}

// ResizeImageAtDifferentWidths is a helper method to define mock.On call
//   - reader io.Reader
//   - width []int
func (_e *ResizerAdapter_Expecter) ResizeImageAtDifferentWidths(reader interface{}, width interface{}) *ResizerAdapter_ResizeImageAtDifferentWidths_Call {
	return &ResizerAdapter_ResizeImageAtDifferentWidths_Call{Call: _e.mock.On("ResizeImageAtDifferentWidths", reader, width)}
}

func (_c *ResizerAdapter_ResizeImageAtDifferentWidths_Call) Run(run func(reader io.Reader, width []int)) *ResizerAdapter_ResizeImageAtDifferentWidths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].([]int))
	})
	return _c
}

func (_c *ResizerAdapter_ResizeImageAtDifferentWidths_Call) Return(_a0 map[int][]byte, _a1 string, _a2 error) *ResizerAdapter_ResizeImageAtDifferentWidths_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResizerAdapter_ResizeImageAtDifferentWidths_Call) RunAndReturn(run func(io.Reader, []int) (map[int][]byte, string, error)) *ResizerAdapter_ResizeImageAtDifferentWidths_Call {
	_c.Call.Return(run)
	return _c
}

// NewResizerAdapter creates a new instance of ResizerAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResizerAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResizerAdapter {
	mock := &ResizerAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
