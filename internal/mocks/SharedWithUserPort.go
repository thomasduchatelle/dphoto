// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	context "context"

	mock "github.com/stretchr/testify/mock"

	usermodel "github.com/thomasduchatelle/dphoto/pkg/usermodel"
)

// SharedWithUserPort is an autogenerated mock type for the SharedWithUserPort type
type SharedWithUserPort struct {
	mock.Mock
}

type SharedWithUserPort_Expecter struct {
	mock *mock.Mock
}

func (_m *SharedWithUserPort) EXPECT() *SharedWithUserPort_Expecter {
	return &SharedWithUserPort_Expecter{mock: &_m.Mock}
}

// ListAlbumIdsSharedWithUser provides a mock function with given fields: ctx, userId
func (_m *SharedWithUserPort) ListAlbumIdsSharedWithUser(ctx context.Context, userId usermodel.UserId) ([]catalog.AlbumId, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for ListAlbumIdsSharedWithUser")
	}

	var r0 []catalog.AlbumId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usermodel.UserId) ([]catalog.AlbumId, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usermodel.UserId) []catalog.AlbumId); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]catalog.AlbumId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usermodel.UserId) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SharedWithUserPort_ListAlbumIdsSharedWithUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlbumIdsSharedWithUser'
type SharedWithUserPort_ListAlbumIdsSharedWithUser_Call struct {
	*mock.Call
}

// ListAlbumIdsSharedWithUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId usermodel.UserId
func (_e *SharedWithUserPort_Expecter) ListAlbumIdsSharedWithUser(ctx interface{}, userId interface{}) *SharedWithUserPort_ListAlbumIdsSharedWithUser_Call {
	return &SharedWithUserPort_ListAlbumIdsSharedWithUser_Call{Call: _e.mock.On("ListAlbumIdsSharedWithUser", ctx, userId)}
}

func (_c *SharedWithUserPort_ListAlbumIdsSharedWithUser_Call) Run(run func(ctx context.Context, userId usermodel.UserId)) *SharedWithUserPort_ListAlbumIdsSharedWithUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usermodel.UserId))
	})
	return _c
}

func (_c *SharedWithUserPort_ListAlbumIdsSharedWithUser_Call) Return(_a0 []catalog.AlbumId, _a1 error) *SharedWithUserPort_ListAlbumIdsSharedWithUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SharedWithUserPort_ListAlbumIdsSharedWithUser_Call) RunAndReturn(run func(context.Context, usermodel.UserId) ([]catalog.AlbumId, error)) *SharedWithUserPort_ListAlbumIdsSharedWithUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewSharedWithUserPort creates a new instance of SharedWithUserPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSharedWithUserPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *SharedWithUserPort {
	mock := &SharedWithUserPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
