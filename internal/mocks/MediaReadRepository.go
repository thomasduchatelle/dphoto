// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"
)

// MediaReadRepository is an autogenerated mock type for the MediaReadRepository type
type MediaReadRepository struct {
	mock.Mock
}

type MediaReadRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MediaReadRepository) EXPECT() *MediaReadRepository_Expecter {
	return &MediaReadRepository_Expecter{mock: &_m.Mock}
}

// FindMediaCurrentAlbum provides a mock function with given fields: ctx, owner, mediaId
func (_m *MediaReadRepository) FindMediaCurrentAlbum(ctx context.Context, owner ownermodel.Owner, mediaId catalog.MediaId) (*catalog.AlbumId, error) {
	ret := _m.Called(ctx, owner, mediaId)

	if len(ret) == 0 {
		panic("no return value specified for FindMediaCurrentAlbum")
	}

	var r0 *catalog.AlbumId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, catalog.MediaId) (*catalog.AlbumId, error)); ok {
		return rf(ctx, owner, mediaId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, catalog.MediaId) *catalog.AlbumId); ok {
		r0 = rf(ctx, owner, mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.AlbumId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner, catalog.MediaId) error); ok {
		r1 = rf(ctx, owner, mediaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaReadRepository_FindMediaCurrentAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMediaCurrentAlbum'
type MediaReadRepository_FindMediaCurrentAlbum_Call struct {
	*mock.Call
}

// FindMediaCurrentAlbum is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
//   - mediaId catalog.MediaId
func (_e *MediaReadRepository_Expecter) FindMediaCurrentAlbum(ctx interface{}, owner interface{}, mediaId interface{}) *MediaReadRepository_FindMediaCurrentAlbum_Call {
	return &MediaReadRepository_FindMediaCurrentAlbum_Call{Call: _e.mock.On("FindMediaCurrentAlbum", ctx, owner, mediaId)}
}

func (_c *MediaReadRepository_FindMediaCurrentAlbum_Call) Run(run func(ctx context.Context, owner ownermodel.Owner, mediaId catalog.MediaId)) *MediaReadRepository_FindMediaCurrentAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ownermodel.Owner), args[2].(catalog.MediaId))
	})
	return _c
}

func (_c *MediaReadRepository_FindMediaCurrentAlbum_Call) Return(id *catalog.AlbumId, err error) *MediaReadRepository_FindMediaCurrentAlbum_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MediaReadRepository_FindMediaCurrentAlbum_Call) RunAndReturn(run func(context.Context, ownermodel.Owner, catalog.MediaId) (*catalog.AlbumId, error)) *MediaReadRepository_FindMediaCurrentAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// FindMedias provides a mock function with given fields: ctx, request
func (_m *MediaReadRepository) FindMedias(ctx context.Context, request *catalog.FindMediaRequest) ([]*catalog.MediaMeta, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for FindMedias")
	}

	var r0 []*catalog.MediaMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.FindMediaRequest) ([]*catalog.MediaMeta, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *catalog.FindMediaRequest) []*catalog.MediaMeta); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.MediaMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *catalog.FindMediaRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaReadRepository_FindMedias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMedias'
type MediaReadRepository_FindMedias_Call struct {
	*mock.Call
}

// FindMedias is a helper method to define mock.On call
//   - ctx context.Context
//   - request *catalog.FindMediaRequest
func (_e *MediaReadRepository_Expecter) FindMedias(ctx interface{}, request interface{}) *MediaReadRepository_FindMedias_Call {
	return &MediaReadRepository_FindMedias_Call{Call: _e.mock.On("FindMedias", ctx, request)}
}

func (_c *MediaReadRepository_FindMedias_Call) Run(run func(ctx context.Context, request *catalog.FindMediaRequest)) *MediaReadRepository_FindMedias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*catalog.FindMediaRequest))
	})
	return _c
}

func (_c *MediaReadRepository_FindMedias_Call) Return(medias []*catalog.MediaMeta, err error) *MediaReadRepository_FindMedias_Call {
	_c.Call.Return(medias, err)
	return _c
}

func (_c *MediaReadRepository_FindMedias_Call) RunAndReturn(run func(context.Context, *catalog.FindMediaRequest) ([]*catalog.MediaMeta, error)) *MediaReadRepository_FindMedias_Call {
	_c.Call.Return(run)
	return _c
}

// NewMediaReadRepository creates a new instance of MediaReadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaReadRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaReadRepository {
	mock := &MediaReadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
