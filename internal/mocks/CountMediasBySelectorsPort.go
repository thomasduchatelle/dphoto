// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/thomasduchatelle/dphoto/pkg/catalog"

	mock "github.com/stretchr/testify/mock"

	ownermodel "github.com/thomasduchatelle/dphoto/pkg/ownermodel"
)

// CountMediasBySelectorsPort is an autogenerated mock type for the CountMediasBySelectorsPort type
type CountMediasBySelectorsPort struct {
	mock.Mock
}

type CountMediasBySelectorsPort_Expecter struct {
	mock *mock.Mock
}

func (_m *CountMediasBySelectorsPort) EXPECT() *CountMediasBySelectorsPort_Expecter {
	return &CountMediasBySelectorsPort_Expecter{mock: &_m.Mock}
}

// CountMediasBySelectors provides a mock function with given fields: ctx, owner, selectors
func (_m *CountMediasBySelectorsPort) CountMediasBySelectors(ctx context.Context, owner ownermodel.Owner, selectors []catalog.MediaSelector) (int, error) {
	ret := _m.Called(ctx, owner, selectors)

	if len(ret) == 0 {
		panic("no return value specified for CountMediasBySelectors")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, []catalog.MediaSelector) (int, error)); ok {
		return rf(ctx, owner, selectors)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ownermodel.Owner, []catalog.MediaSelector) int); ok {
		r0 = rf(ctx, owner, selectors)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ownermodel.Owner, []catalog.MediaSelector) error); ok {
		r1 = rf(ctx, owner, selectors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountMediasBySelectorsPort_CountMediasBySelectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMediasBySelectors'
type CountMediasBySelectorsPort_CountMediasBySelectors_Call struct {
	*mock.Call
}

// CountMediasBySelectors is a helper method to define mock.On call
//   - ctx context.Context
//   - owner ownermodel.Owner
//   - selectors []catalog.MediaSelector
func (_e *CountMediasBySelectorsPort_Expecter) CountMediasBySelectors(ctx interface{}, owner interface{}, selectors interface{}) *CountMediasBySelectorsPort_CountMediasBySelectors_Call {
	return &CountMediasBySelectorsPort_CountMediasBySelectors_Call{Call: _e.mock.On("CountMediasBySelectors", ctx, owner, selectors)}
}

func (_c *CountMediasBySelectorsPort_CountMediasBySelectors_Call) Run(run func(ctx context.Context, owner ownermodel.Owner, selectors []catalog.MediaSelector)) *CountMediasBySelectorsPort_CountMediasBySelectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ownermodel.Owner), args[2].([]catalog.MediaSelector))
	})
	return _c
}

func (_c *CountMediasBySelectorsPort_CountMediasBySelectors_Call) Return(_a0 int, _a1 error) *CountMediasBySelectorsPort_CountMediasBySelectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CountMediasBySelectorsPort_CountMediasBySelectors_Call) RunAndReturn(run func(context.Context, ownermodel.Owner, []catalog.MediaSelector) (int, error)) *CountMediasBySelectorsPort_CountMediasBySelectors_Call {
	_c.Call.Return(run)
	return _c
}

// NewCountMediasBySelectorsPort creates a new instance of CountMediasBySelectorsPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCountMediasBySelectorsPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CountMediasBySelectorsPort {
	mock := &CountMediasBySelectorsPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
