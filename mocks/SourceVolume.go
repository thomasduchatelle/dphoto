// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/domain/backup"

	testing "testing"
)

// SourceVolume is an autogenerated mock type for the SourceVolume type
type SourceVolume struct {
	mock.Mock
}

// Children provides a mock function with given fields: path
func (_m *SourceVolume) Children(path backup.MediaPath) (backup.SourceVolume, error) {
	ret := _m.Called(path)

	var r0 backup.SourceVolume
	if rf, ok := ret.Get(0).(func(backup.MediaPath) backup.SourceVolume); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backup.SourceVolume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(backup.MediaPath) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMedias provides a mock function with given fields:
func (_m *SourceVolume) FindMedias() ([]backup.FoundMedia, error) {
	ret := _m.Called()

	var r0 []backup.FoundMedia
	if rf, ok := ret.Get(0).(func() []backup.FoundMedia); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]backup.FoundMedia)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *SourceVolume) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewSourceVolume creates a new instance of SourceVolume. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSourceVolume(t testing.TB) *SourceVolume {
	mock := &SourceVolume{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
