// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	catalog "github.com/thomasduchatelle/dphoto/domain/catalog"
	catalogacl "github.com/thomasduchatelle/dphoto/domain/catalogacl"

	mock "github.com/stretchr/testify/mock"
)

// View is an autogenerated mock type for the View type
type View struct {
	mock.Mock
}

// CanReadMedia provides a mock function with given fields: owner, id
func (_m *View) CanReadMedia(owner string, id string) error {
	ret := _m.Called(owner, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(owner, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAlbums provides a mock function with given fields: filter
func (_m *View) ListAlbums(filter catalogacl.ListAlbumsFilter) ([]*catalogacl.AlbumInView, error) {
	ret := _m.Called(filter)

	var r0 []*catalogacl.AlbumInView
	if rf, ok := ret.Get(0).(func(catalogacl.ListAlbumsFilter) []*catalogacl.AlbumInView); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalogacl.AlbumInView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(catalogacl.ListAlbumsFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMediasFromAlbum provides a mock function with given fields: owner, album
func (_m *View) ListMediasFromAlbum(owner string, album string) (*catalog.MediaPage, error) {
	ret := _m.Called(owner, album)

	var r0 *catalog.MediaPage
	if rf, ok := ret.Get(0).(func(string, string) *catalog.MediaPage); ok {
		r0 = rf(owner, album)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*catalog.MediaPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewView interface {
	mock.TestingT
	Cleanup(func())
}

// NewView creates a new instance of View. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewView(t mockConstructorTestingTNewView) *View {
	mock := &View{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
