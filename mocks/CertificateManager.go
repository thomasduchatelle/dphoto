// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dnsdomain "github.com/thomasduchatelle/dphoto/domain/dnsdomain"

	testing "testing"
)

// CertificateManager is an autogenerated mock type for the CertificateManager type
type CertificateManager struct {
	mock.Mock
}

// FindCertificate provides a mock function with given fields: domain
func (_m *CertificateManager) FindCertificate(domain string) (*dnsdomain.ExistingCertificate, error) {
	ret := _m.Called(domain)

	var r0 *dnsdomain.ExistingCertificate
	if rf, ok := ret.Get(0).(func(string) *dnsdomain.ExistingCertificate); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsdomain.ExistingCertificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallCertificate provides a mock function with given fields: id, certificate
func (_m *CertificateManager) InstallCertificate(id string, certificate dnsdomain.CompleteCertificate) error {
	ret := _m.Called(id, certificate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, dnsdomain.CompleteCertificate) error); ok {
		r0 = rf(id, certificate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCertificateManager creates a new instance of CertificateManager. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertificateManager(t testing.TB) *CertificateManager {
	mock := &CertificateManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
