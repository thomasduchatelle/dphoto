// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
	migrator "github.com/thomasduchatelle/dphoto/tools/dphotoops/migrator"
)

// ScanTransformation is an autogenerated mock type for the ScanTransformation type
type ScanTransformation struct {
	mock.Mock
}

// GeneratePatches provides a mock function with given fields: run, item
func (_m *ScanTransformation) GeneratePatches(run *migrator.TransformationRun, item map[string]*dynamodb.AttributeValue) ([]*dynamodb.WriteRequest, error) {
	ret := _m.Called(run, item)

	var r0 []*dynamodb.WriteRequest
	if rf, ok := ret.Get(0).(func(*migrator.TransformationRun, map[string]*dynamodb.AttributeValue) []*dynamodb.WriteRequest); ok {
		r0 = rf(run, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dynamodb.WriteRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*migrator.TransformationRun, map[string]*dynamodb.AttributeValue) error); ok {
		r1 = rf(run, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewScanTransformation interface {
	mock.TestingT
	Cleanup(func())
}

// NewScanTransformation creates a new instance of ScanTransformation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScanTransformation(t mockConstructorTestingTNewScanTransformation) *ScanTransformation {
	mock := &ScanTransformation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
