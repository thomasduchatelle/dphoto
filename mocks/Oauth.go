// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	oauth "github.com/thomasduchatelle/dphoto/domain/accessadapters/oauth"
)

// Oauth is an autogenerated mock type for the Oauth type
type Oauth struct {
	mock.Mock
}

// AuthenticateFromExternalIDProvider provides a mock function with given fields: identityJWT
func (_m *Oauth) AuthenticateFromExternalIDProvider(identityJWT string) (oauth.Authentication, oauth.Identity, error) {
	ret := _m.Called(identityJWT)

	var r0 oauth.Authentication
	if rf, ok := ret.Get(0).(func(string) oauth.Authentication); ok {
		r0 = rf(identityJWT)
	} else {
		r0 = ret.Get(0).(oauth.Authentication)
	}

	var r1 oauth.Identity
	if rf, ok := ret.Get(1).(func(string) oauth.Identity); ok {
		r1 = rf(identityJWT)
	} else {
		r1 = ret.Get(1).(oauth.Identity)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(identityJWT)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Authorise provides a mock function with given fields: accessJWT, validator
func (_m *Oauth) Authorise(accessJWT string, validator func(oauth.Claims) error) error {
	ret := _m.Called(accessJWT, validator)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(oauth.Claims) error) error); ok {
		r0 = rf(accessJWT, validator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOauth interface {
	mock.TestingT
	Cleanup(func())
}

// NewOauth creates a new instance of Oauth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOauth(t mockConstructorTestingTNewOauth) *Oauth {
	mock := &Oauth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
