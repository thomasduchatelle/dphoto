// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	catalogmodel "github.com/thomasduchatelle/dphoto/domain/catalogmodel"

	testing "testing"
)

// CatalogProxyAdapter is an autogenerated mock type for the CatalogProxyAdapter type
type CatalogProxyAdapter struct {
	mock.Mock
}

// Create provides a mock function with given fields: createRequest
func (_m *CatalogProxyAdapter) Create(createRequest catalogmodel.CreateAlbum) error {
	ret := _m.Called(createRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(catalogmodel.CreateAlbum) error); ok {
		r0 = rf(createRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllAlbums provides a mock function with given fields: owner
func (_m *CatalogProxyAdapter) FindAllAlbums(owner string) ([]*catalogmodel.Album, error) {
	ret := _m.Called(owner)

	var r0 []*catalogmodel.Album
	if rf, ok := ret.Get(0).(func(string) []*catalogmodel.Album); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalogmodel.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSignatures provides a mock function with given fields: owner, signatures
func (_m *CatalogProxyAdapter) FindSignatures(owner string, signatures []*catalogmodel.MediaSignature) ([]*catalogmodel.MediaSignature, error) {
	ret := _m.Called(owner, signatures)

	var r0 []*catalogmodel.MediaSignature
	if rf, ok := ret.Get(0).(func(string, []*catalogmodel.MediaSignature) []*catalogmodel.MediaSignature); ok {
		r0 = rf(owner, signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalogmodel.MediaSignature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*catalogmodel.MediaSignature) error); ok {
		r1 = rf(owner, signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMedias provides a mock function with given fields: owner, medias
func (_m *CatalogProxyAdapter) InsertMedias(owner string, medias []catalogmodel.CreateMediaRequest) error {
	ret := _m.Called(owner, medias)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []catalogmodel.CreateMediaRequest) error); ok {
		r0 = rf(owner, medias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCatalogProxyAdapter creates a new instance of CatalogProxyAdapter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCatalogProxyAdapter(t testing.TB) *CatalogProxyAdapter {
	mock := &CatalogProxyAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
