// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	backup "github.com/thomasduchatelle/dphoto/domain/backup"

	testing "testing"
)

// CompletionReport is an autogenerated mock type for the CompletionReport type
type CompletionReport struct {
	mock.Mock
}

// CountPerAlbum provides a mock function with given fields:
func (_m *CompletionReport) CountPerAlbum() map[string]*backup.TypeCounter {
	ret := _m.Called()

	var r0 map[string]*backup.TypeCounter
	if rf, ok := ret.Get(0).(func() map[string]*backup.TypeCounter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*backup.TypeCounter)
		}
	}

	return r0
}

// NewAlbums provides a mock function with given fields:
func (_m *CompletionReport) NewAlbums() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Skipped provides a mock function with given fields:
func (_m *CompletionReport) Skipped() backup.MediaCounter {
	ret := _m.Called()

	var r0 backup.MediaCounter
	if rf, ok := ret.Get(0).(func() backup.MediaCounter); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backup.MediaCounter)
	}

	return r0
}

// NewCompletionReport creates a new instance of CompletionReport. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompletionReport(t testing.TB) *CompletionReport {
	mock := &CompletionReport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
