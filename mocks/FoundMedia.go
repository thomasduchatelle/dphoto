// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	io "io"

	backupmodel "github.com/thomasduchatelle/dphoto/dphoto/backup/backupmodel"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	time "time"
)

// FoundMedia is an autogenerated mock type for the FoundMedia type
type FoundMedia struct {
	mock.Mock
}

// LastModificationDate provides a mock function with given fields:
func (_m *FoundMedia) LastModificationDate() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MediaPath provides a mock function with given fields:
func (_m *FoundMedia) MediaPath() backupmodel.MediaPath {
	ret := _m.Called()

	var r0 backupmodel.MediaPath
	if rf, ok := ret.Get(0).(func() backupmodel.MediaPath); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backupmodel.MediaPath)
	}

	return r0
}

// ReadMedia provides a mock function with given fields:
func (_m *FoundMedia) ReadMedia() (io.ReadCloser, error) {
	ret := _m.Called()

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleSignature provides a mock function with given fields:
func (_m *FoundMedia) SimpleSignature() *backupmodel.SimpleMediaSignature {
	ret := _m.Called()

	var r0 *backupmodel.SimpleMediaSignature
	if rf, ok := ret.Get(0).(func() *backupmodel.SimpleMediaSignature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupmodel.SimpleMediaSignature)
		}
	}

	return r0
}

// NewFoundMedia creates a new instance of FoundMedia. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFoundMedia(t testing.TB) *FoundMedia {
	mock := &FoundMedia{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
