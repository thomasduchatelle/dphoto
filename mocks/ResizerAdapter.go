// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	io "io"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// ResizerAdapter is an autogenerated mock type for the ResizerAdapter type
type ResizerAdapter struct {
	mock.Mock
}

// ResizeImage provides a mock function with given fields: reader, width, fast
func (_m *ResizerAdapter) ResizeImage(reader io.Reader, width int, fast bool) ([]byte, string, error) {
	ret := _m.Called(reader, width, fast)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(io.Reader, int, bool) []byte); ok {
		r0 = rf(reader, width, fast)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(io.Reader, int, bool) string); ok {
		r1 = rf(reader, width, fast)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(io.Reader, int, bool) error); ok {
		r2 = rf(reader, width, fast)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewResizerAdapter creates a new instance of ResizerAdapter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewResizerAdapter(t testing.TB) *ResizerAdapter {
	mock := &ResizerAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
